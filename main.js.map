{"version":3,"sources":["./src/app/service/subscribers.service.ts","./src/app/subscriber/read-subscriber/read-subscriber.component.ts","./src/app/subscriber/read-subscriber/read-subscriber.component.html","./src/app/subscriber/create-subscriber/create-subscriber.component.ts","./src/app/subscriber/create-subscriber/create-subscriber.component.html","./src/app/service/login.service.ts","./src/app/security/guard/login.guard.ts","./src/app/service/register.service.ts","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/environments/environment.ts","./src/app/include/footer/footer.component.ts","./src/app/include/footer/footer.component.html","./src/app/service/contact.service.ts","./src/app/security/login/login.component.ts","./src/app/security/login/login.component.html","./src/app/include/header/header.component.ts","./src/app/include/header/header.component.html","./src/app/app.routes.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/security/guard/logout.guard.ts","./src/app/app.module.ts","./src/app/security/register/register.component.ts","./src/app/security/register/register.component.html","./src/app/contact/contact.component.ts","./src/app/contact/contact.component.html","./src/environments/environment.prod.ts","./src/app/subscriber/update-subscriber/update-subscriber.component.ts","./src/app/subscriber/update-subscriber/update-subscriber.component.html","./src/app/subscriber/read-subscribers/read-subscribers.component.ts","./src/app/subscriber/read-subscribers/read-subscribers.component.html","./src/app/security/interceptor/login.interceptor.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AACzB;;;AAQpC,MAAM,kBAAkB;IAI7B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,QAAG,GAAG,0EAAW,CAAC,GAAG,CAAC;IAEkB,CAAC;IAEzC,iBAAiB;IACjB,gBAAgB,CAAC,UAAsB;QACrC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAe,GAAG,IAAI,CAAC,GAAG,wBAAwB,EAAE,UAAU,CAAC,CAAC;IACvF,CAAC;IAED,sBAAsB;IACtB,eAAe;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAe,GAAG,IAAI,CAAC,GAAG,uBAAuB,CAAC,CAAC;IACzE,CAAC;IAED,kCAAkC;IAClC,cAAc,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAe,GAAG,IAAI,CAAC,GAAG,gCAAgC,EAAE,EAAE,CAAC,CAAC;IACtF,CAAC;IAED,oBAAoB;IACpB,gBAAgB,CAAC,UAAsB;QACrC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAe,GAAG,IAAI,CAAC,GAAG,6BAA6B,UAAU,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;IAC1G,CAAC;IAED,qBAAqB;IACrB,gBAAgB,CAAC,EAAU;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAe,GAAG,IAAI,CAAC,GAAG,6BAA6B,EAAE,EAAE,CAAC,CAAC;IACtF,CAAC;;oFA7BU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;6FAEP,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;;;;;;AAS7D,MAAM,uBAAuB;IAMlC;IACE,uBAAuB;IACf,WAAwB,EACxB,kBAAsC,EACtC,MAAc,EACd,MAAsB;QAHtB,gBAAW,GAAX,WAAW,CAAa;QACxB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAgB;IAC5B,CAAC;IAEL,QAAQ;QACN,qCAAqC;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;QAChD,+BAA+B;QAE/B,iFAAiF;QACjF,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,SAAS,CAC9D,CAAC,QAAQ,EAAE,EAAE;YACX,yBAAyB;YACzB,sCAAsC;YACtC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACjD,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACjD,yEAAyE;YACzE,EAAE,EAAE,CAAC,EAAE,CAAC;YACR,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,CAAC,EAAE,EAAE;oBACV,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;oBACxB,yDAAU,CAAC,OAAO,CAAC,2CAA2C,CAAC;iBAChE,CAAC;YACF,OAAO,EAAE,CAAC,EAAE,CAAC;YACb,EAAE,EAAE,CAAC,EAAE,CAAC;SACT,CAAC,CAAC;IACL,CAAC;;8FA5CU,uBAAuB;uGAAvB,uBAAuB;QCVpC,yEACI;QAAA,wEAAiB;QAAA,0EAA0B;QAAA,+DAAI;QAAA,4DAAO;QAAC,wEAAY;QAAA,4DAAK;QACxE,2EACI;QAAA,wEACI;QAAA,qEACI;QAAA,wEAAkC;QAAA,kEAAO;QAAA,4DAAK;QAClD,4DAAK;QACT,4DAAQ;QACR,yEACI;QAAA,sEACI;QAAA,sEAAI;QAAA,8DAAE;QAAA,4DAAK;QACX,sEAAI;QAAA,uEAA2E;QAAA,4DAAK;QACxF,4DAAK;QACL,sEACI;QAAA,sEAAI;QAAA,sEAAU;QAAA,4DAAK;QACnB,sEAAI;QAAA,uEAA4E;QAAA,4DAAK;QACzF,4DAAK;QACL,sEACI;QAAA,sEAAI;QAAA,qEAAS;QAAA,4DAAK;QAClB,sEAAI;QAAA,uEAA4E;QAAA,4DAAK;QACzF,4DAAK;QACL,sEACI;QAAA,sEAAI;QAAA,iEAAK;QAAA,4DAAK;QACd,sEAAI;QAAA,uEAA4E;QAAA,4DAAK;QACzF,4DAAK;QACL,sEACI;QAAA,sEAAI;QAAA,mEAAO;QAAA,4DAAK;QAChB,sEAAI;QAAA,uEAA8E;QAAA,4DAAK;QAC3F,4DAAK;QACL,sEACI;QAAA,sEAAI;QAAA,8DAAE;QAAA,4DAAK;QACX,sEAAI;QAAA,wEAAyE;QAAA,4DAAK;QACtF,4DAAK;QACT,4DAAQ;QACZ,4DAAQ;QACR,iEACA;QAAA,yEAA4D;QAAA,mEAAU;QAAA,4DAAI;QAC9E,4DAAM;;QAnCK,0DAAkC;QAAlC,+FAAkC;QAkCtC,2DAAoC;QAApC,6IAAoC;;6FD1B9B,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,WAAW,EAAE,kCAAkC;gBAC/C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;;;;;;;;;;;;;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;;;;;;;ICMpD,0EAAqI;IAAA,yFAA8B;IAAA,4DAAM;;;IACzK,0EAAsI;IAAA,uGAA4C;IAAA,4DAAM;;;IAKxL,0EAAqI;IAAA,wFAA6B;IAAA,4DAAM;;;IACxK,0EAAsI;IAAA,sGAA2C;IAAA,4DAAM;;;IAKvL,0EAAqI;IAAA,oFAAyB;IAAA,4DAAM;;;IACpK,0EAAsI;IAAA,kGAAuC;IAAA,4DAAM;;;IACnL,0EAAoI;IAAA,qFAA0B;IAAA,4DAAM;;;ADV7K,MAAM,yBAAyB;IAMpC;IACE,uBAAuB;IACf,WAAwB,EACxB,kBAAsC,EACtC,MAAc;QAFd,gBAAW,GAAX,WAAW,CAAa;QACxB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,WAAM,GAAN,MAAM,CAAQ;IACpB,CAAC;IAEL,QAAQ;QACN,oBAAoB;QACpB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACjD,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,CAAC,EAAE,EAAE;oBACV,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;oBACxB,yDAAU,CAAC,OAAO,CAAC,2CAA2C,CAAC;iBAChE,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC7C,iGAAiG;QACjG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,SAAS,CACjF,CAAC,IAAI,EAAE,EAAE;YACP,qBAAqB;YACrB,MAAM,IAAI,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC,EACA,CAAC,GAAG,EAAE,EAAE;YACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC,CACD,CAAC;IACN,CAAC;;kGAvCU,yBAAyB;yGAAzB,yBAAyB;QCXtC,yEACI;QAAA,wEAAiB;QAAA,0EAA0B;QAAA,iEAAM;QAAA,4DAAO;QAAC,wEAAY;QAAA,4DAAK;QAC1E,yEACI;QAAA,0EACI;QAAA,yEACI;QAAA,2EAAmB;QAAA,qEAAU;QAAA,4DAAQ;QACrC,uEACA;QAAA,uHAAqI;QACrI,uHAAsI;QAC1I,4DAAM;QACN,0EACI;QAAA,4EAAmB;QAAA,qEAAS;QAAA,4DAAQ;QACpC,wEACA;QAAA,uHAAqI;QACrI,uHAAsI;QAC1I,4DAAM;QACN,0EACI;QAAA,6EAAmB;QAAA,iEAAK;QAAA,4DAAQ;QAChC,wEACA;QAAA,uHAAqI;QACrI,uHAAsI;QACtI,uHAAoI;QACxI,4DAAM;QAEF,8EAA2F;QAArB,kJAAS,cAAU,IAAC;QAAC,kEAAM;QAAA,4DAAS;QAClH,4DAAO;QACX,4DAAM;QACN,iEACA;QAAA,yEAA4D;QAAA,mEAAU;QAAA,4DAAI;QAC9E,4DAAM;;QA1BQ,0DAAkC;QAAlC,+FAAkC;QAIP,0DAA2G;QAA3G,6KAA2G;QAC3G,0DAA4G;QAA5G,8KAA4G;QAK5G,0DAA2G;QAA3G,6KAA2G;QAC3G,0DAA4G;QAA5G,8KAA4G;QAK5G,0DAA2G;QAA3G,6KAA2G;QAC3G,0DAA4G;QAA5G,8KAA4G;QAC5G,0DAA0G;QAA1G,4KAA0G;QAGvG,0DAAyC;QAAzC,sGAAyC;QAI9E,0DAAoC;QAApC,8IAAoC;;6FDjB9B,yBAAyB;cALrC,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,mCAAmC,CAAC;aACjD;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AACzB;;;;AAQpC,MAAM,YAAY;IAIvB,YACU,IAAgB,EAChB,MAAc;QADd,SAAI,GAAJ,IAAI,CAAY;QAChB,WAAM,GAAN,MAAM,CAAQ;QAJxB,QAAG,GAAG,0EAAW,CAAC,GAAG,CAAC;IAKlB,CAAC;IAEL,0BAA0B;IAC1B,KAAK,CAAC,SAAS;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,GAAG,YAAY,EAAE,SAAS,CAAC,CAAC;IACjE,CAAC;IAED,0DAA0D;IAC1D,MAAM;QACJ,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;QAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,yCAAyC;IACzC,QAAQ;QACN,OAAO,CAAC,CAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;;wEAxBU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;6FAEP,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACND;AAAA;AAAO,MAAM,UAAU;IACnB,WAAW,CACP,KAA6B,EAC7B,KAA0B;QAO1B,oDAAoD;QACpD,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5C,OAAO,CAAC,CAAC,CAAE,KAAK,CAAC,CAAC;IACtB,CAAC;CACJ;;;;;;;;;;;;;AChBD;AAAA;AAAA;AAAA;AAAA;AAAoE;AACzB;;;AAQpC,MAAM,eAAe;IAI1B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,QAAG,GAAG,0EAAW,CAAC,GAAG,CAAC;IAEkB,CAAC;IAEzC,sBAAsB;IACtB,UAAU,CAAC,IAAU;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAS,GAAG,IAAI,CAAC,GAAG,eAAe,EAAE,IAAI,CAAC,CAAC;IAClE,CAAC;;8EATU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,MAAM;6FAEP,eAAe;cAH3B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,aAAa;IAExB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;0EALU,aAAa;6FAAb,aAAa;QCP1B,yEACI;QAAA,wEAAsB;QAAA,0EAA0B;QAAA,+DAAI;QAAA,4DAAO;QAAC,4EAAgB;QAAA,4DAAK;QACjF,2EACI;QAAA,wEAER;QAEY,qEACI;QAAA,wEAAqC;QAAA,qEAAI;QAAA,yEAAa;QAAA,4DAAK;QAAA,4DAAK;QACpE,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,yEAAa;QAAA,4DAAK;QAClC,yEAAgB;QAAA,wEAAqE;QAAA,4FAAgC;QAAA,4DAAI;QAAA,4DAAK;QAClI,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,wFAAkB;QAAA,4DAAK;QACvC,yEAAgB;QAAA,wEAAwE;QAAA,wFAAkB;QAAA,4DAAI;QAAA,4DAAK;QACvH,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,mFAAuB;QAAA,4DAAK;QAC5C,yEAAgB;QAAA,0EAAc;QAAA,4DAAK;QACvC,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,sFAA0B;QAAA,4DAAK;QAC/C,yEAAgB;QAAA,wEAA0I;QAAA,iGAAqC;QAAA,4DAAI;QAAA,4DAAK;QAC5M,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,yGAA6C;QAAA,4DAAK;QAClE,yEAChB;QAAA,uEACA;QAAA,wHAGA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,iFAAqB;QAAA,4DAAK;QAC1C,yEAChB;QAAA,uEACA;QAAA,wEAA6E;QAAA,gGAAoC;QAAA,4DAAI;QACrH,+FACA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,mFAAuB;QAAA,4DAAK;QAC5C,yEAAgB;QAAA,wEAAY;QAAA,4DAAK;QACrC,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,2FAA0B;QAAA,4DAAK;QAC/C,yEAChB;QAAA,uEACA;QAAA,oLAGA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,6EAAiB;QAAA,4DAAK;QACtC,yEAChB;QAAA,uEACA;QAAA,0GAGA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,+EAAmB;QAAA,4DAAK;QACxC,yEAChB;QAAA,uEACA;QAAA,sFAEA;QAAA,4EAAsB;QAAA,6FAAiC;QAAA,4DAAO;QAC9D,8GACA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,iFAAqB;QAAA,4DAAK;QAC1C,yEAChB;QAAA,uEACA;QAAA,yFAEA;QAAA,4EAAsB;QAAA,6FAAiC;QAAA,4DAAO;QAC9D,+GACA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,oFAAwB;QAAA,4DAAK;QAC7C,yEAChB;QAAA,uEACA;QAAA,4EAAsB;QAAA,4EAAgB;QAAA,4DAAO;QAC7C,iFAEA;QAAA,4EAAsB;QAAA,+EAAmB;QAAA,4DAAO;QAChD,yGAEA;QAAA,4EAAsB;QAAA,4EAAgB;QAAA,4DAAO;QAC7C,iJAEA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,sEACI;QAAA,yEAAgB;QAAA,mFAAuB;QAAA,4DAAK;QAC5C,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,oFAAuB;QAAA,4DAAO;QACpD,2IAIA;QAAA,6EAAsB;QAAA,2FAAyB;QAAA,4DAAO;QACtD,kFACA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,+EAAkB;QAAA,4DAAK;QACvC,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,yFAAuB;QAAA,4DAAO;QACpD,wKAIA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QAIL,uEACI;QAAA,0EAAqC;QAAA,uEAAI;QAAA,iFAAe;QAAA,4DAAK;QAAA,4DAAK;QADtE,4DACI;QACJ,kEACA;QAAA,uEACI;QAAA,0EAAgB;QAAA,8EAAY;QAAA,4DAAK;QACjC,0EAAgB;QAAA,oFAAuB;QAAA,4DAAK;QAChD,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,sFAAoB;QAAA,4DAAK;QACzC,0EAChB;QAAA,wEACA;QAAA,gUAaA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,uFAAqB;QAAA,4DAAK;QAC1C,0EAChB;QAAA,wEACA;QAAA,iTAOA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,6FAA2B;QAAA,4DAAK;QAChD,0EAChB;QAAA,wEACA;QAAA,sVAQA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QAIL,uEACI;QAAA,0EAAqC;QAAA,uEAAI;QAAA,uEAAU;QAAA,4DAAK;QAAA,4DAAK;QADjE,4DACI;QACJ,kEACA;QAAA,uEACI;QAAA,0EAAgB;QAAA,yGAAkC;QAAA,4DAAK;QACvD,0EAChB;QAAA,wEACA;QAAA,6EAEA;QAAA,6EAAsB;QAAA,wGAA2C;QAAA,4DAAO;QACxE;QAAA,0EAAO;QAAA,iEAAO;QAAA,6EAAmB;QAAA,8EAAe;QAAA,4DAAO;QAAA,0FAC/C;QAAA,6EAAmB;QAAA,mFAAoB;QAAA,4DAAO;QAAA,0HAE7C;QAAA,6EAAmB;QAAA,wEAAW;QAAA,4DAAO;QAAA,4EAAa;QAAA,6EAAmB;QAAA,uEAAU;QAAA,4DAAO;QAAA,sKAExC;QAAA,6EAAmB;QAAA,4EAAe;QAAA,4DAAO;QAAA,wFAC/E;QAAA,6EAAmB;QAAA,wKACQ;QAAA,4DAAO;QAAA,oIAGlC;QAAA,6EAAmB;QAAA,sKACW;QAAA,4DAAO;QAAA,yOAKU;QAAA,6EAAmB;QAAA,4EAAe;QAAA,4DAAO;QAAA,2FACxF;QAAA,6EAAmB;QAAA,8KACW;QAAA,4DAAO;QAAA,qLAKnC;QAAA,6EAAmB;QAAA,6FAA8B;QAAA,4DAAO;QAAA,4FAE9D;QAAA,4DAAQ;QACrB;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,0GAAmC;QAAA,4DAAK;QACxD,0EAChB;QAAA,wEACA;QAAA,gFAEA;QAAA,6EAAsB;QAAA,2GAA8C;QAAA,4DAAO;QAC3E;QAAA,0EAAO;QAAA,mEAAS;QAAA,6EAAmB;QAAA,wEAAW;QAAA,4DAAO;QAAA,+EAAgB;QAAA,6EAAmB;QAAA,uEAAU;QAAA,4DAAO;QAAA,uNAGlD;QAAA,6EAAmB;QAAA,4EAAe;QAAA,4DAAO;QAAA,wFAC/E;QAAA,6EAAmB;QAAA,6KACc;QAAA,4DAAO;QAAA,qIAGxC;QAAA,6EAAmB;QAAA,4KACc;QAAA,4DAAO;QAAA,2RAMO;QAAA,6EAAmB;QAAA,4EAAe;QAAA,4DAAO;QAAA,2FACxF;QAAA,6EAAmB;QAAA,mLACiB;QAAA,4DAAO;QAAA,wIAG3C;QAAA,6EAAmB;QAAA,oLACiB;QAAA,4DAAO;QAAA,yQAKM;QAAA,6EAAmB;QAAA,4EAAe;QAAA,4DAAO;QAAA,wNAG1F;QAAA,6EAAmB;QAAA,wMACqB;QAAA,4DAAO;QAAA,kOAOnD;QAAA,4DAAQ;QACrB;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,oHAAuD;QAAA,4DAAK;QAC5E,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,kGAAqC;QAAA,4DAAO;QAClE,sOAOA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,kFAAgB;QAAA,4DAAK;QACrC,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,wGAAsC;QAAA,4DAAO;QAC1E,skBAYA;QAAA,6EAAsB;QAAA,iGAAoC;QAAA,4DAAO;QACjE,0IAKA;QAAA,6EAAsB;QAAA,yGAA4C;QAAA,4DAAO;QACzE,8SAIA;QAAA,6EAAsB;QAAA,sGAAyC;QAAA,4DAAO;QACtE,oJAEqC;QAAA,4DAAQ;QAC7C;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,8GAAiD;QAAA,4DAAK;QACtE,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,yGAA4C;QAAA,4DAAO;QAChF,2EAAW;QAAA,6EAAmB;QAAA,+EAAgB;QAAA,4DAAO;QAAC,6QAI9C;QAAA,6EAAmB;QAAA,+FAA0C;QAAA,4DAAO;QAAC,sHAE7E;QAAA,6EAAsB;QAAA,uGAA0C;QAAA,4DAAO;QACvE,oFACA;QAAA,6EAAsB;QAAA,yGAA4C;QAAA,4DAAO;QACzE,mIAEM;QAAA,4DAAQ;QACd;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QAIL,uEACI;QAAA,0EAAqC;QAAA,uEAAI;QAAA,uFAA0B;QAAA,4DAAK;QAAA,4DAAK;QADjF,4DACI;QACJ,kEACA;QAAA,uEACI;QAAA,0EAAgB;QAAA,qIAAmE;QAAA,4DAAK;QACxF,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,sGAAyC;QAAA,4DAAO;QACtE;QAAA,0EAAO;QAAA,uRAKH;QAAA,6EAAsB;QAAA,oGAAkC;QAAA,4DAAO;QAC/D,oKAKI;QAAA,6EAAsB;QAAA,oFAAuB;QAAA,4DAAO;QACpD,oOAMA;QAAA,6EAAsB;QAAA,iFAAoB;QAAA,4DAAO;QACjD,sWASJ;QAAA,6EAAsB;QAAA,uFAA0B;QAAA,4DAAO;QACvD,wIAEI;QAAA,6EAAsB;QAAA,uHAAgD;QAAA,4DAAO;QAC7E,gJAIA;QAAA,6EAAsB;QAAA,2GAA+B;QAAA,4DAAO;QAC5D,0OAKA;QAAA,6EAAsB;QAAA,mKAAgF;QAAA,4DAAO;QAC7G,iTAKQ;QAAA,6EAAsB;QAAA,4HAA+D;QAAA,4DAAO;QAC5F,kZAUV;QAAA,4DAAQ;QACd;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,sIAAoE;QAAA,4DAAK;QACzF,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,yGAA4C;QAAA,4DAAO;QACzE;QAAA,0EAAO;QAAA,ySAKL;QAAA,6EAAsB;QAAA,oGAAkC;QAAA,4DAAO;QAC/D,yIAIE;QAAA,6EAAsB;QAAA,oFAAuB;QAAA,4DAAO;QACpD,sNAMA;QAAA,6EAAsB;QAAA,iFAAoB;QAAA,4DAAO;QACjD,4WAOF;QAAA,6EAAsB;QAAA,wFAAsB;QAAA,4DAAO;QACnD,sKAIE;QAAA,6EAAsB;QAAA,uHAAgD;QAAA,4DAAO;QAC7E,iIAIA;QAAA,6EAAsB;QAAA,2KAAwF;QAAA,4DAAO;QACrH,mYAaJ;QAAA,4DAAQ;QACR;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QAIL,uEACI;QAAA,0EAAqC;QAAA,uEAAI;QAAA,qEAAQ;QAAA,4DAAK;QAAA,4DAAK;QAD/D,4DACI;QACJ,kEACA;QAAA,uEACI;QAAA,0EAAgB;QAAA,gGAAmC;QAAA,4DAAK;QACxD,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,kGAAqC;QAAA,4DAAO;QAClE;QAAA,6EAAsB;QAAA,8HAAiE;QAAA,4DAAO;QAC9F,oKAKA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,+FAAwB;QAAA,4DAAK;QAC7C,0EAChB;QAAA,wEACA;QAAA,6EAEA;QAAA,6EAAsB;QAAA,oGAAuC;QAAA,4DAAO;QACpE,iQAOA;QAAA,6EAAsB;QAAA,sHAA+C;QAAA,4DAAO;QAC5E;QAAA,6EAAsB;QAAA,uFAA0B;QAAA,4DAAO;QACvD,4KAGA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,kGAA2B;QAAA,4DAAK;QAChD,0EAChB;QAAA,wEACA;QAAA,gFAEA;QAAA,6EAAsB;QAAA,uGAA0C;QAAA,4DAAO;QACvE,uSAQA;QAAA,6EAAsB;QAAA,wFAAsB;QAAA,4DAAO;QACnD,sLAGA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QAIL,uEACI;QAAA,0EAAqC;QAAA,uEAAI;QAAA,iFAAoB;QAAA,4DAAK;QAAA,4DAAK;QAD3E,4DACI;QACJ,kEACA;QAAA,uEACI;QAAA,0EAAgB;QAAA,mFAAiB;QAAA,4DAAK;QACtC,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,uGAAqC;QAAA,4DAAO;QACzE,gjCAgCK;QAAA,4DAAQ;QACb;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,mFAAiB;QAAA,4DAAK;QACtC,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,mGAAiC;QAAA,4DAAO;QACrE,0EACI;QAAA,6EAAsB;QAAA,oIAAqE;QAAA,4DAAO;QAClG,kUAOA;QAAA,6EAAsB;QAAA,0HAA8C;QAAA,4DAAO;QAC3E,+KAGI;QAAA,6EAAsB;QAAA,2GAAyC;QAAA,4DAAO;QACtE,qHAEA;QAAA,6EAAsB;QAAA,iHAA0C;QAAA,4DAAO;QACvE,iOAGA;QAAA,6EAAsB;QAAA,gHAA8C;QAAA,4DAAO;QAC3E,gVAMA;QAAA,6EAAsB;QAAA,uFAA0B;QAAA,4DAAO;QACvD,uGACI;QAAA,6EAAsB;QAAA,kHAAgD;QAAA,4DAAO;QAC7E,0dAYP;QAAA,4DAAQ;QACb;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,sFAAoB;QAAA,4DAAK;QACzC,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,sGAAoC;QAAA,4DAAO;QACxE,0EACI;QAAA,6EAAsB;QAAA,oIAAqE;QAAA,4DAAO;QAClG,0WAQA;QAAA,6EAAsB;QAAA,0HAA8C;QAAA,4DAAO;QAC3E,+KAGI;QAAA,6EAAsB;QAAA,2GAAyC;QAAA,4DAAO;QACtE,qHAEA;QAAA,6EAAsB;QAAA,iHAA0C;QAAA,4DAAO;QACvE,iiBASI;QAAA,6EAAsB;QAAA,8GAAuC;QAAA,4DAAO;QACpE,6mBAqBZ;QAAA,6EAAsB;QAAA,iGAA+B;QAAA,4DAAO;QAC5D,sHACA;QAAA,4DAAQ;QACR;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QAIL,uEACI;QAAA,0EAAqC;QAAA,uEAAI;QAAA,+EAAQ;QAAA,4DAAK;QAAA,4DAAK;QAD/D,4DACI;QACJ,kEACA;QAAA,uEACI;QAAA,0EAAgB;QAAA,qGAAwC;QAAA,4DAAK;QAC7D,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,6FAAgC;QAAA,4DAAO;QACpE,6IAGA;QAAA,6EAAsB;QAAA,sGAAyC;QAAA,4DAAO;QACtE,oeAeA;QAAA,6EAAsB;QAAA,iGAA+B;QAAA,4DAAO;QAC5D,0GAA2C;QAAA,4DAAQ;QACnD;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,gFAAc;QAAA,4DAAK;QACnC,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,yGAA4C;QAAA,4DAAO;QAChF;QAAA,6EAAsB;QAAA,sHAAoD;QAAA,4DAAO;QACjF,gHAEA;QAAA,6EAAsB;QAAA,uGAA0C;QAAA,4DAAO;QACvE,iHACA;QAAA,6EAAsB;QAAA,yHAAuD;QAAA,4DAAO;QACpF,uHAIA;QAAA,6EAAsB;QAAA,oGAAuC;QAAA,4DAAO;QACpE,0GACA;QAAA,6EAAsB;QAAA,4HAA0D;QAAA,4DAAO;QACvF,uLAIM;QAAA,4DAAQ;QACd;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,mHAAkD;QAAA,4DAAK;QACvE,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,iSAKH;QAAA,6EAAsB;QAAA,uEAAU;QAAA,4DAAO;QACnC,8HAEJ;QAAA,6EAAsB;QAAA,8DAAC;QAAA,4DAAO;QAAA,0MAGD;QAAA,6EAAsB;QAAA,mEAAM;QAAA,4DAAO;QACpD,qJACJ;QAAA,6EAAsB;QAAA,8DAAC;QAAA,4DAAO;QAAA,qTAYnC;QAAA,4DAAQ;QACf;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,uGAAqC;QAAA,4DAAK;QAC1D,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,uNAIH;QAAA,6EAAsB;QAAA,yEAAY;QAAA,4DAAO;QACrC,+IAEJ;QAAA,6EAAsB;QAAA,8DAAC;QAAA,4DAAO;QAAA,6QAK1B;QAAA,6EAAsB;QAAA,gIAAoD;QAAA,4DAAO;QACjF,0JAGF;QAAA,4DAAQ;QACd;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,wGAAsC;QAAA,4DAAK;QAC3D,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,wNAIH;QAAA,6EAAsB;QAAA,yEAAY;QAAA,4DAAO;QACrC,+IAEJ;QAAA,6EAAsB;QAAA,8DAAC;QAAA,4DAAO;QAAA,0aAY5B;QAAA,4DAAQ;QACd;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,2HAA+C;QAAA,4DAAK;QACpE,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,iGAAoC;QAAA,4DAAO;QACxE,mWASA;QAAA,6EAAsB;QAAA,iGAAoC;QAAA,4DAAO;QACjE,yUAI2D;QAAA,6EAAsB;QAAA,uFAA0B;QAAA,4DAAO;QAAC,kHAC9D;QAAA,6EAAsB;QAAA,uFAA0B;QAAA,4DAAO;QAAC,yIACjC;QAAA,6EAAsB;QAAA,sFAAyB;QAAA,4DAAO;QAAC,uIACzD;QAAA,6EAAsB;QAAA,sFAAyB;QAAA,4DAAO;QAAC,6IACjD;QAAA,6EAAsB;QAAA,sFAAyB;QAAA,4DAAO;QAAC,8IAErI;QAAA,4DAAQ;QACV;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,+FAAwB;QAAA,4DAAK;QAC7C,0EAChB;QAAA,wEACA;QAAA,0EAAO;QAAA,6EAAsB;QAAA,yGAA4C;QAAA,4DAAO;QAChF,mEAAO;QAAA,6EAAsB;QAAA,kFAAmB;QAAA,4DAAO;QAAA,sHAChD;QAAA,6EAAsB;QAAA,kFAAmB;QAAA,4DAAO;QAAA,mHAChD;QAAA,6EAAsB;QAAA,iFAAkB;QAAA,4DAAO;QAAA,gIAC/C;QAAA,6EAAsB;QAAA,iFAAkB;QAAA,4DAAO;QAAA,iIAEtD;QAAA,6EAAsB;QAAA,uGAA0C;QAAA,4DAAO;QACvE;QAAA,6EAAsB;QAAA,iHAA+C;QAAA,4DAAO;QAC5E,qIAIA;QAAA,6EAAsB;QAAA,oGAAuC;QAAA,4DAAO;QACpE;QAAA,6EAAsB;QAAA,gHAAyC;QAAA,4DAAO;QACtE,uIAGA;QAAA,4DAAQ;QACR;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QAIL,uEACI;QAAA,0EAAqC;QAAA,uEAAI;QAAA,uEAAU;QAAA,4DAAK;QAAA,4DAAK;QACjE,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,+FAAkC;QAAA,4DAAK;QACvD,0EAChB;QAAA,wEACA;QAAA,0EAAuE;QAAA,gFAAmB;QAAA,4DAAI;QAC9F;QAAA,0EAA6F;QAAA,2EAAc;QAAA,4DAAI;QAE/G,uFACA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,8FAAiC;QAAA,4DAAK;QACtD,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,iGAAoC;QAAA,4DAAO;QACjE,gKAKA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,sGAAoC;QAAA,4DAAK;QACzD,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,4GAA+C;QAAA,4DAAO;QAC5E,oQASA;QAAA,6EAAsB;QAAA,8GAAiD;QAAA,4DAAO;QAC9E,qcAeA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QAIL,uEACI;QAAA,0EAAqC;QAAA,uEAAI;QAAA,6EAAW;QAAA,4DAAK;QAAA,4DAAK;QAClE,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,wFAAsB;QAAA,4DAAK;QAC3C,0EAAgB;QAAA,0EAAmF;QAAA,wFAAsB;QAAA,4DAAI;QAAA,4DAAK;QACtI,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,gGAA8B;QAAA,4DAAK;QACnD,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,gGAAmC;QAAA,4DAAO;QAChE,8JAGA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,iFAAoB;QAAA,4DAAK;QACzC,0EAAgB;QAAA,0EAA4G;QAAA,8GAAkC;QAAA,4DAAI;QAAA,4DAAK;QAC3K,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,oFAAuB;QAAA,4DAAK;QAC5C,0EAAgB;QAAA,sEAAS;QAAA,4DAAK;QAClC,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,sFAAoB;QAAA,4DAAK;QACzC,0EAAgB;QAAA,0EAAa;QAAA,4DAAK;QACtC,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,uFAAqB;QAAA,4DAAK;QAC1C,0EAChB;QAAA,wEACA;QAAA,kKAGA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,sFAAyB;QAAA,4DAAK;QAC9C,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,iFAAoB;QAAA,4DAAO;QACjD,6IAKA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,uHAAgD;QAAA,4DAAK;QACrE,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,6FAAgC;QAAA,4DAAO;QAC7D,8UAWA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,wFAAsB;QAAA,4DAAK;QAC3C,0EAChB;QAAA,wEACA;QAAA,gNAMA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,4FAA+B;QAAA,4DAAK;QACpD,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,6GAAgD;QAAA,4DAAO;QAC7E,oFAEA;QAAA,0EAA8E;QAAA,4FAA+B;QAAA,4DAAI;QACjH;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,0EAAgB;QAAA,gGAA8B;QAAA,4DAAK;QACnD,0EAChB;QAAA,wEACA;QAAA,6EAAsB;QAAA,sGAAyC;QAAA,4DAAO;QAEtE;QAAA,6EAAsB;QAAA,qGAA8B;QAAA,4DAAO;QAC3D;QAAA,0EAA+F;QAAA,kGAA2B;QAAA,4DAAI;QAE9H;QAAA,6EAAsB;QAAA,yFAA4B;QAAA,4DAAO;QACzD,+JAEA;QAAA,4DAAM;QACU,4DAAK;QACT,4DAAK;QACT,4DAAQ;QACZ,4DAAQ;QACZ,4DAAM;;6FDrjCO,aAAa;cALzB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;gBACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AEND;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,GAAG,EAAE,oCAAoC;CAC1C,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;AChBnE;AAAA;AAAA;AAAkD;;AAO3C,MAAM,eAAe;IAE1B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8EALU,eAAe;+FAAf,eAAe;QCP5B,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,wEACI;QAAA,qEAAI;QAAA,kEAA4F;QAAA,4DAAK;QACrG,qEAAI;QAAA,kEAAoG;QAAA,4DAAK;QAC7G,qEAAI;QAAA,mEAA+F;QAAA,4DAAK;QACxG,sEAAI;QAAA,mEAAiG;QAAA,4DAAK;QAC1G,sEAAI;QAAA,mEAA8F;QAAA,4DAAK;QAC3G,4DAAK;QACL,0EAAuB;QAAA,+GAAmD;QAAA,4DAAM;QACpF,4DAAM;QACV,4DAAS;QACb,4DAAM;QACV,4DAAM;;6FDRO,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAoE;AACzB;;;AAOpC,MAAM,cAAc;IAIzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,QAAG,GAAG,0EAAW,CAAC,GAAG,CAAC;IAEiB,CAAC;IAExC,kBAAkB;IAClB,SAAS,CAAC,WAAgB;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,GAAG,GAAG,cAAc,EAAE,WAAW,CAAC,CAAC;IACrE,CAAC;;4EATU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;6FAEP,cAAc;cAH1B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;;;;;;;ICE5D,yEAAqD;IAAA,uDAAa;IAAA,4DAAK;;;IAAlB,0DAAa;IAAb,yFAAa;;;IAClE,0EAA0D;IAAA,uGAA4C;IAAA,4DAAM;;;IAKpG,2EAA0H;IAAA,kFAAuB;IAAA,4DAAO;;;IACxJ,2EAAyH;IAAA,qFAA0B;IAAA,4DAAO;;;IAK1J,2EAAgI;IAAA,qFAA0B;IAAA,4DAAO;;ADJ1K,MAAM,cAAc;IAMzB;IACE,uBAAuB;IACf,WAAwB,EACxB,YAA0B,EAC1B,MAAc;QAFd,gBAAW,GAAX,WAAW,CAAa;QACxB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,WAAM,GAAN,MAAM,CAAQ;QANxB,iBAAY,GAAG,KAAK,CAAC;IAOjB,CAAC;IAEL,QAAQ;QACN,oBAAoB;QACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,2CAA2C,CAAC,CAAC,CAAC;YACnG,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACpC,CAAC,CAAC;IACL,CAAC;IAED,0BAA0B;IAC1B,KAAK;QACH,qCAAqC;QACrC,gDAAgD;QAChD,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YAC1B,OAAO;SACR;QAED,+BAA+B;QAC/B,MAAM,SAAS,GAAG;YAChB,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;YAC1C,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;SACjD,CAAC;QAEF,gFAAgF;QAChF,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,SAAS,CAC1C,CAAC,QAAQ,EAAE,EAAE;YACX,yBAAyB;YACzB,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;YAChC,+BAA+B;YAC/B,+DAA+D;YAC/D,IAAI,QAAQ,CAAC,KAAK,EAAE;gBAClB,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC9C,MAAM,IAAI,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC5B;iBAAM;gBACL,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;aAC1B;QACH,CAAC,CACF,CAAC;IACJ,CAAC;;4EAnDU,cAAc;8FAAd,cAAc;QCX3B,yEACI;QAAA,wEAAiB;QAAA,0EAA0B;QAAA,+DAAI;QAAA,4DAAO;QAAC,8DAAE;QAAA,4DAAK;QAC9D,yEACI;QAAA,wGAAqD;QACrD,0GAA0D;QAC1D,0EACI;QAD0B,0IAAY,WAAO,IAAC;QAC9C,yEACI;QAAA,4EAAmB;QAAA,iEAAK;QAAA,4DAAQ;QAChC,uEACA;QAAA,8GAA0H;QAC1H,8GAAyH;QAC7H,4DAAM;QACN,0EACI;QAAA,6EAAsB;QAAA,oEAAQ;QAAA,4DAAQ;QACtC,wEACA;QAAA,8GAAgI;QACpI,4DAAM;QACN,0EACI;QAAA,8EAAqD;QAAA,mEAAO;QAAA,4DAAS;QACzE,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;;QAnBM,0DAAe;QAAf,6EAAe;QACd,0DAAoB;QAApB,kFAAoB;QACnB,0DAAuB;QAAvB,oFAAuB;QAIK,0DAA+F;QAA/F,iKAA+F;QAC/F,0DAA8F;QAA9F,gKAA8F;QAK9F,0DAAqG;QAArG,uKAAqG;QAGzG,0DAA8B;QAA9B,2FAA8B;;6FDPvD,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;ICS1C,wEAAyC;IAAA,uEAA2E;IAAA,kEAAO;IAAA,4DAAI;IAAA,4DAAK;;IAAvE,0DAA4B;IAA5B,6IAA4B;;;;IACzF,wEAAyC;IAAA,uEAAwE;IAAA,kEAAO;IAAA,4DAAI;IAAA,4DAAK;;IAApE,0DAAyB;IAAzB,6IAAyB;;;;IACtF,wEAAwC;IAAA,uEAAmF;IAAA,oEAAS;IAAA,4DAAI;IAAA,4DAAK;;IAAjF,0DAAoC;IAApC,6IAAoC;;;;;IAChG,wEAAwC;IAAA,wEAAqF;IAAnB,2SAAkB;IAAC,mEAAQ;IAAA,4DAAI;IAAA,4DAAK;;IAAlF,0DAAmB;IAAnB,6IAAmB;;;;ADJhF,MAAM,eAAe;IAG1B,YACU,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QAHpC,eAAU,GAAG,KAAK,CAAC;IAIf,CAAC;IAEL,QAAQ;IACR,CAAC;IAED,4CAA4C;IAC5C,IAAI;QACF,OAAO,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;IAC5C,CAAC;IAED,uDAAuD;IACvD,MAAM;QACJ,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;IAED,+CAA+C;IAC/C,QAAQ;QACN,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;;8EAvBU,eAAe;+FAAf,eAAe;QCR5B,yEACE;QAAA,yEACE;QAAA,uEAAyC;QAAA,8EAAmB;QAAA,4DAAI;QAChE,0EACE;QADI,qIAAS,UAAM,IAAC;QACpB,0EAAkC;QAAA,kEAAoC;QAAA,4DAAO;QAC/E,4DAAO;QACP,yEACE;QAAA,wEACE;QAAA,wEAAqB;QAAA,wEAAkE;QAAA,gEAAI;QAAA,4DAAI;QAAA,4DAAK;QACpG,4GAAyC;QACzC,4GAAyC;QACzC,4GAAwC;QACxC,4GAAwC;QACxC,yEAAqB;QAAA,wEAA0E;QAAA,mEAAO;QAAA,4DAAI;QAAA,4DAAK;QACjH,4DAAK;QACP,4DAAM;QACR,4DAAM;QACR,4DAAM;;QAXmD,0DAA8B;QAA9B,0JAA8B;QAEtC,0DAAmB;QAAnB,6IAAmB;QACxD,0DAAmB;QAAnB,iFAAmB;QACnB,0DAAmB;QAAnB,iFAAmB;QACnB,0DAAkB;QAAlB,gFAAkB;QAClB,0DAAkB;QAAlB,gFAAkB;QACmB,0DAA2B;QAA3B,8IAA2B;;6FDL/D,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACD;AACqB;AACT;AACH;AACwC;AACH;AACG;AACN;AACvC;AACE;AAE5D,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,kEAAa,EAAE,SAAS,EAAE,MAAM,EAAE;IACzD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,uFAAiB,EAAE,WAAW,EAAE,CAAC,yEAAW,CAAC,EAAE;IAC9E,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,8EAAc,EAAE,WAAW,EAAE,CAAC,yEAAW,CAAC,EAAE;IACxE,EAAE,IAAI,EAAE,mBAAmB,EAAE,SAAS,EAAE,mHAAyB,EAAE,WAAW,EAAE,CAAC,sEAAU,CAAC,EAAE;IAC9F,EAAE,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,gHAAwB,EAAE,WAAW,EAAE,CAAC,sEAAU,CAAC,EAAE;IAC5F,EAAE,IAAI,EAAE,uBAAuB,EAAE,SAAS,EAAE,mHAAyB,EAAE,WAAW,EAAE,CAAC,sEAAU,CAAC,EAAE;IAClG,EAAE,IAAI,EAAE,qBAAqB,EAAE,SAAS,EAAE,6GAAuB,EAAE;IACnE,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,2EAAgB,EAAE;CACjD,CAAC;AAEK,MAAM,SAAS,GAAG,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE;IAClD,iBAAiB,EAAE,SAAS;CAC/B,CAAC,CAAC;;;;;;;;;;;;;ACzBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;;AAOnC,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,uBAAuB,CAAC;KACjC;;wEAFY,YAAY;4FAAZ,YAAY;QCPzB,wEAAyB;QACzB,yEACI;QAAA,2EAA+B;QACnC,4DAAM;QACN,wEAAyB;;6FDGZ,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEJD;AAAA;AAAO,MAAM,WAAW;IACpB,WAAW,CACP,KAA6B,EAC7B,KAA0B;QAO1B,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,KAAK,EAAE;YACP,OAAO,KAAK,CAAC;SAChB;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;CACJ;;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACe;AACX;AACQ;AACA;AAEZ;AAEM;AACO;AACc;AACA;AACO;AACT;AACqC;AACH;AACG;AACN;AAEb;AAC1B;AACE;AACG;;;;AA+BxD,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAPT;QACT,iGAAwB;QACxB,uEAAU;QACV,yEAAW;KACZ,YAZQ;YACP,uEAAa,CAAC,oBAAoB,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;YAC1D,qEAAgB;YAChB,0DAAW;YACX,kEAAmB;YACnB,kEAAmB;YACnB,qDAAS;SACV;mIAQU,SAAS,mBA3BlB,2DAAY;QACZ,kEAAa;QACb,gFAAe;QACf,gFAAe;QACf,wFAAiB;QACjB,+EAAc;QACd,oHAAyB;QACzB,iHAAwB;QACxB,oHAAyB;QACzB,8GAAuB;QACvB,4EAAgB,sFAIhB,qEAAgB;QAChB,0DAAW;QACX,kEAAmB;QACnB,kEAAmB;6FAUV,SAAS;cA7BrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,kEAAa;oBACb,gFAAe;oBACf,gFAAe;oBACf,wFAAiB;oBACjB,+EAAc;oBACd,oHAAyB;oBACzB,iHAAwB;oBACxB,oHAAyB;oBACzB,8GAAuB;oBACvB,4EAAgB;iBACjB;gBACD,OAAO,EAAE;oBACP,uEAAa,CAAC,oBAAoB,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;oBAC1D,qEAAgB;oBAChB,0DAAW;oBACX,kEAAmB;oBACnB,kEAAmB;oBACnB,qDAAS;iBACV;gBACD,SAAS,EAAE;oBACT,iGAAwB;oBACxB,uEAAU;oBACV,yEAAW;iBACZ;gBACD,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACrDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;;;;;;;ICMpD,2EACI;IAAA,qFACJ;IAAA,4DAAO;;;IACP,2EACI;IAAA,wFACJ;IAAA,4DAAO;;;IAKP,2EACI;IAAA,wFACJ;IAAA,4DAAO;;;IACP,2EACI;IAAA,2GACJ;IAAA,4DAAO;;;IAKP,2EACI;IAAA,+FACJ;IAAA,4DAAO;;ADlBhB,MAAM,iBAAiB;IAK5B;IACE,uBAAuB;IACf,WAAwB,EACxB,eAAgC,EAChC,MAAc;QAFd,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAiB;QAChC,WAAM,GAAN,MAAM,CAAQ;QANxB,gBAAW,GAAG,KAAK,CAAC;IAOhB,CAAC;IAEL,QAAQ;QACN,oBAAoB;QACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACzC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,2CAA2C,CAAC,CAAC,CAAC;YACnG,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,UAAU,EAAE,CAAC,KAAK,EAAE,yDAAU,CAAC,YAAY,CAAC;SAC7C,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB;IACtB,UAAU;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,wCAAwC;QAExC,gDAAgD;QAChD,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAC7B,OAAO;SACR;QAED,wFAAwF;QACxF,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,SAAS,CAChE,CAAC,QAAQ,EAAE,EAAE;YACX,yBAAyB;YACzB,gCAAgC;YAChC,MAAM,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CACF,CAAC;IACJ,CAAC;;kFA3CU,iBAAiB;iGAAjB,iBAAiB;QCX9B,yEACI;QAAA,wEAAiB;QAAA,0EAA0B;QAAA,+DAAI;QAAA,4DAAO;QAAC,8DAAE;QAAA,4DAAK;QAC9D,yEACI;QAAA,0EACI;QAD6B,6IAAY,gBAAY,IAAC;QACtD,yEACI;QAAA,2EAAmB;QAAA,gEAAK;QAAA,4DAAQ;QAChC,uEACA;QAAA,iHACI;QAEJ,iHACI;QAER,4DAAM;QACN,0EACI;QAAA,4EAAsB;QAAA,oEAAQ;QAAA,4DAAQ;QACtC,wEACA;QAAA,iHACI;QAEJ,iHACI;QAER,4DAAM;QACN,2EACI;QAAA,wEACA;QAAA,6EAAiD;QAAA,uEAAW;QAAA,4DAAQ;QACpE,iHACI;QAER,4DAAM;QACN,0EACI;QAAA,0EAAQ;QAAA,mEAAO;QAAA,4DAAS;QAC5B,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;;QAjCQ,0DAA0B;QAA1B,uFAA0B;QAIE,0DAAqG;QAArG,uKAAqG;QAGrG,0DAAoG;QAApG,sKAAoG;QAOpG,0DAA2G;QAA3G,6KAA2G;QAG3G,0DAA4G;QAA5G,8KAA4G;QAO3G,0DAAgI;QAAhI,sMAAgI;;6FDhB9J,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAEkB;;;;;;ICA9D,0EACE;IAAA,6GACF;IAAA,4DAAM;;;IAwBQ,2EAA4H;IAAA,iFAAsB;IAAA,4DAAO;;;IAKzJ,2EAA8H;IAAA,kFAAuB;IAAA,4DAAO;;;IAChK,2EAA6H;IAAA,qFAA0B;IAAA,4DAAO;;;IAK1J,2EAAkI;IAAA,oFAAyB;IAAA,4DAAO;;AD7B/K,MAAM,gBAAgB;IAK3B;IACE,uBAAuB;IACf,WAAwB,EACxB,cAA8B;QAD9B,gBAAW,GAAX,WAAW,CAAa;QACxB,mBAAc,GAAd,cAAc,CAAgB;QALxC,cAAS,GAAG,KAAK,CAAC;IAMd,CAAC;IAEL,QAAQ;QACN,oBAAoB;QACpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACxC,IAAI,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC/B,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,2CAA2C,CAAC,CAAC,CAAC;YACnG,OAAO,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACnC,CAAC,CAAC;IACL,CAAC;IAED,sFAAsF;IACtF,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,SAAS,CACpE,QAAQ,CAAC,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACvB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC,EACD,KAAK,CAAC,EAAE;YACN,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC,CACF,CAAC;IACJ,CAAC;;gFAjCU,gBAAgB;gGAAhB,gBAAgB;QCV7B,yEACE;QAAA,yEACI;QAAA,4GACE;QAEJ,4DAAM;QACN,yEACI;QAAA,yEACI;QAAA,wEAAiB;QAAA,0EAAe;QAAA,4DAAK;QACrC,qEACI;QAAA,qEAAI;QAAA,6EAAkB;QAAA,iEAAK;QAAA,uEAAW;QAAA,4DAAK;QAC3C,sEAAI;QAAA,4EAAgB;QAAA,4DAAK;QACzB,sEAAI;QAAA,oFAAwB;QAAA,4DAAK;QACrC,4DAAK;QACL,yEAAiB;QAAA,2EAAe;QAAA,4DAAK;QACrC,sEACI;QAAA,sEAAI;QAAA,kFAAsB;QAAA,4DAAK;QAC/B,sEAAI;QAAA,+EAAmB;QAAA,4DAAK;QAC5B,sEAAI;QAAA,2EAAe;QAAA,4DAAK;QACxB,sEAAI;QAAA,yEAAa;QAAA,4DAAK;QACtB,sEAAI;QAAA,yEAAa;QAAA,4DAAK;QAC1B,4DAAK;QACT,4DAAM;QACN,0EACI;QAAA,2EACI;QAD4B,6IAAY,cAAU,IAAC;QACnD,0EACI;QAAA,4EAAkB;QAAA,gEAAI;QAAA,4DAAQ;QAC9B,wEACA;QAAA,iHAA4H;QAChI,4DAAM;QACN,0EACI;QAAA,6EAAmB;QAAA,iEAAK;QAAA,4DAAQ;QAChC,wEACA;QAAA,iHAA8H;QAClI,iHAA6H;QAC7H,4DAAM;QACN,2EACI;QAAA,6EAAqB;QAAA,mEAAO;QAAA,4DAAQ;QACpC,2EAA4I;QAC5I,iHAAkI;QACtI,4DAAM;QACN,2EACI;QAAA,8EAAuD;QAAA,kEAAM;QAAA,4DAAS;QAC1E,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;QACV,4DAAM;;QA9CC,0DAAqB;QAArB,kFAAqB;QACjB,0DAAsC;QAAtC,wGAAsC;QAsB/B,2DAAyB;QAAzB,sFAAyB;QAIG,0DAAiG;QAAjG,mKAAiG;QAKjG,0DAAmG;QAAnG,qKAAmG;QACvG,0DAAkG;QAAlG,oKAAkG;QAK9F,0DAAuG;QAAvG,yKAAuG;QAG3G,0DAAgC;QAAhC,6FAAgC;;6FDhC7D,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;;;;;;;;;;;;;AETD;AAAA;AAAO,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,IAAI;IAChB,GAAG,EAAE,oCAAoC;CAC1C,CAAC;;;;;;;;;;;;;ACHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;;;;;;;ICMpD,0EAAqI;IAAA,yFAA8B;IAAA,4DAAM;;;IACzK,0EAAsI;IAAA,uGAA4C;IAAA,4DAAM;;;IAKxL,0EAAqI;IAAA,wFAA6B;IAAA,4DAAM;;;IACxK,0EAAsI;IAAA,sGAA2C;IAAA,4DAAM;;;IAKvL,0EAAqI;IAAA,oFAAyB;IAAA,4DAAM;;;IACpK,0EAAsI;IAAA,kGAAuC;IAAA,4DAAM;;;IACnL,0EAAoI;IAAA,qFAA0B;IAAA,4DAAM;;;ADV7K,MAAM,yBAAyB;IAKpC;IACE,uBAAuB;IACf,WAAwB,EACxB,kBAAsC,EACtC,MAAc,EACd,MAAsB;QAHtB,gBAAW,GAAX,WAAW,CAAa;QACxB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAgB;IAC5B,CAAC;IAEL,QAAQ;QACN,qCAAqC;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;QAChD,+BAA+B;QAE/B,gFAAgF;QAChF,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,SAAS,CAC9D,CAAC,QAAQ,EAAE,EAAE;YACX,yBAAyB;YACzB,sCAAsC;YACtC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACjD,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CACF,CAAC;QAEF,oBAAoB;QACpB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACjD,+DAA+D;YAC/D,EAAE,EAAE,CAAC,EAAE,CAAC;YACR,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,CAAC,EAAE,EAAE;oBACV,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;oBACxB,yDAAU,CAAC,OAAO,CAAC,2CAA2C,CAAC;iBAChE,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;QACd,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE;YACrC,OAAO;SACR;QACD,iGAAiG;QACjG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,SAAS,CACjF,CAAC,QAAQ,EAAE,EAAE;YACX,MAAM,IAAI,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CACF,CAAC;IACJ,CAAC;;kGA3DU,yBAAyB;yGAAzB,yBAAyB;QCXtC,yEACI;QAAA,wEAAiB;QAAA,0EAA0B;QAAA,iEAAM;QAAA,4DAAO;QAAC,wEAAY;QAAA,4DAAK;QAC1E,yEACI;QAAA,0EACI;QAAA,yEACI;QAAA,2EAAmB;QAAA,qEAAU;QAAA,4DAAQ;QACrC,uEACA;QAAA,uHAAqI;QACrI,uHAAsI;QAC1I,4DAAM;QACN,0EACI;QAAA,4EAAmB;QAAA,qEAAS;QAAA,4DAAQ;QACpC,wEACA;QAAA,uHAAqI;QACrI,uHAAsI;QAC1I,4DAAM;QACN,0EACI;QAAA,6EAAmB;QAAA,iEAAK;QAAA,4DAAQ;QAChC,wEACA;QAAA,uHAAqI;QACrI,uHAAsI;QACtI,uHAAoI;QACxI,4DAAM;QACN,8EAAoG;QAA5F,kJAAS,sBAAkB,IAAC;QAAgE,kEAAM;QAAA,4DAAS;QACvH,4DAAO;QACX,4DAAM;QACN,iEACA;QAAA,yEAA4D;QAAA,mEAAU;QAAA,4DAAI;QAC9E,4DAAM;;QAzBQ,0DAAkC;QAAlC,+FAAkC;QAIP,0DAA2G;QAA3G,6KAA2G;QAC3G,0DAA4G;QAA5G,8KAA4G;QAK5G,0DAA2G;QAA3G,6KAA2G;QAC3G,0DAA4G;QAA5G,8KAA4G;QAK5G,0DAA2G;QAA3G,6KAA2G;QAC3G,0DAA4G;QAA5G,8KAA4G;QAC5G,0DAA0G;QAA1G,4KAA0G;QAElG,0DAAyC;QAAzC,sGAAyC;QAInF,0DAAoC;QAApC,8IAAoC;;6FDhB9B,yBAAyB;cALrC,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,mCAAmC,CAAC;aACjD;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;;ICWtC,qEACI;IAAA,qEAAI;IAAA,uDAAgC;;IAAA,4DAAK;IACzC,qEAAI;IAAA,uDAAgC;;IAAA,4DAAK;IACzC,qEAAI;IAAA,uDAAsB;IAAA,4DAAK;IAC/B,qEACI;IAAA,wEAAyF;IAAzC,mXAAwC;IAAC,gEAAI;IAAA,4DAAI;IACjG,yEAA8F;IAA3C,qXAA0C;IAAC,kEAAM;IAAA,4DAAI;IACxG,yEAAyF;IAAvC,iXAAsC;IAAC,kEAAM;IAAA,4DAAI;IACvG,4DAAK;IACT,4DAAK;;;IARG,0DAAgC;IAAhC,qJAAgC;IAChC,0DAAgC;IAAhC,qJAAgC;IAChC,0DAAsB;IAAtB,oFAAsB;;;;ADHnC,MAAM,wBAAwB;IAQnC;IACI,uBAAuB;IACf,kBAAsC,EACtC,MAAc;QADd,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,WAAM,GAAN,MAAM,CAAQ;QAN1B,SAAI,GAAG,CAAC,CAAC;IAOH,CAAC;IAEP,QAAQ;QACJ,6DAA6D;QAC7D,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjE,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;YAC5B,iCAAiC;YAEjC,aAAa;YACb,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4DAA4D;IAC5D,kBAAkB,CAAC,WAAuB;QACxC,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,EAAE,CAAC;QACzB,MAAM,IAAI,GAAG,CAAC,mBAAmB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,yDAAyD;IACzD,oBAAoB,CAAC,WAAuB;QAC1C,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,EAAE,CAAC;QACzB,MAAM,IAAI,GAAG,CAAC,qBAAqB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,gBAAgB,CAAC,WAAuB;QACtC,IAAG,MAAM,CAAC,OAAO,CAAC,2CAA2C,CAAC,EAAE;YAChE,gFAAgF;YAChF,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,SAAS,CAChE,CAAC,QAAQ,EAAE,EAAE;gBACX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;;gGA/CU,wBAAwB;wGAAxB,wBAAwB;QCXrC,yEACI;QAAA,wEAAiB;QAAA,0EAA0B;QAAA,gEAAK;QAAA,4DAAO;QAAC,yEAAQ;QAAA,4DAAK;QACrE,wEAAqB;QAAA,2EAAgB;QAAA,4DAAK;QAC1C,uEAAgG;QAAA,iEAAM;QAAA,4DAAI;QAC1G,2EACI;QAAA,yEACI;QAAA,sEACI;QAAA,sEAAI;QAAA,sEAAU;QAAA,4DAAK;QAAA,sEAAI;QAAA,qEAAS;QAAA,4DAAK;QAAA,sEAAI;QAAA,iEAAK;QAAA,4DAAK;QAAA,sEAAI;QAAA,mEAAO;QAAA,4DAAK;QACvE,4DAAK;QACT,4DAAQ;QACR,yEACI;QAAA,qHACI;;QASR,4DAAQ;QACZ,4DAAQ;QACR,0EACI;QAAA,0FAAkI;QAAnD,mMAA4B;QAAC,4DAAsB;QACtI,4DAAM;QACV,4DAAM;;QAvBC,0DAAqC;QAArC,6IAAqC;QAQ5B,2DAA6I;QAA7I,yPAA6I;;6FDAhJ,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAA2H;AAGpH,MAAM,gBAAgB;IACzB,SAAS,CAAC,GAAqB,EAAE,IAAiB;QAC9C,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,KAAK,EAAE;YACP,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAE,EAAC,MAAM,EAAE,IAAI,+DAAU,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,EAAC,CAAE,CAAC;YACpF,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAChC;aAAM;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3B;IACL,CAAC;CACJ;AAEM,MAAM,wBAAwB,GAAG;IACtC,OAAO,EAAE,sEAAiB;IAC1B,QAAQ,EAAE,gBAAgB;IAC1B,KAAK,EAAE,IAAI;CACZ,CAAC;;;;;;;;;;;;;ACpBF;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["import { environment } from './../../environments/environment.prod';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subscriber } from '../model/subscriber';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubscribersService {\n\n  api = environment.api;\n\n  constructor(private http: HttpClient) { }\n\n  // crée un abonné\n  createSubscriber(subscriber: Subscriber): Observable<Subscriber[]> {\n    return this.http.post<Subscriber[]>(`${this.api}/create_subscriber.php`, subscriber);\n  }\n\n  // affiche les abonnés\n  readSubscribers(): Observable<Subscriber[]> {\n    return this.http.get<Subscriber[]>(`${this.api}/read_subscribers.php`);\n  }\n\n  // affiche les détails d'un abonné\n  readSubscriber(id: number): Observable<Subscriber[]> {\n    return this.http.get<Subscriber[]>(`${this.api}/get_subscriber_by_id.php?id=${id}`);\n  }\n\n  // modifie un abonné\n  updateSubscriber(subscriber: Subscriber): Observable<Subscriber[]> {\n    return this.http.put<Subscriber[]>(`${this.api}/update_subscriber.php?id=${subscriber.id}`, subscriber);\n  }\n\n  // supprime un abonné\n  deleteSubscriber(id: number): Observable<Subscriber[]> {\n    return this.http.delete<Subscriber[]>(`${this.api}/delete_subscriber.php?id=${id}`);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { SubscribersService } from '../../service/subscribers.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-read-subscriber',\n  templateUrl: './read-subscriber.component.html',\n  styleUrls: ['./read-subscriber.component.css']\n})\nexport class ReadSubscriberComponent implements OnInit {\n\n  // crée un objet de type FormGroup\n  createSubscriberForm: FormGroup;\n  id: number;\n\n  constructor(\n    // injecte les services\n    private formBuilder: FormBuilder,\n    private subscribersService: SubscribersService,\n    private router: Router,\n    private routes: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    // récupère le param \"id\" de la route\n    const routeParams = this.routes.snapshot.params;\n    // console.log(routeParams.id);\n\n    // passe en paramètre l'id' à la méthode \"readSubscriber()\" du subscribersService\n    this.subscribersService.readSubscriber(routeParams.id).subscribe(\n      (response) => {\n        // console.log(response);\n        // affiche les données dans les champs\n        this.createSubscriberForm.patchValue(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n\n    this.createSubscriberForm = this.formBuilder.group({\n      // !!! Bien penser à l'ajouter l'id pour éviter l'erreur id=undefined !!!\n      id: [''],\n      fname: ['', [Validators.required, Validators.maxLength(12)]],\n      lname: ['', [Validators.required, Validators.maxLength(12)]],\n      email: ['', [\n        Validators.required,\n        Validators.maxLength(30),\n        Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")\n      ]],\n      created: [''],\n      ip: ['']\n    });\n  }\n}\n","<div class=\"mt-3 container section\">\n    <h2 class=\"mb-5\"><span class=\"spantitleh2\">Read</span> a subscriber</h2>\n    <table [formGroup]=\"createSubscriberForm\" class=\"table table-striped table-hover mx-auto bg-white\">\n        <thead>\n            <tr>\n                <th colspan=2 class=\"text-center\">Details</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Id</td>\n                <td><input type=\"number\" formControlName=\"id\" class=\"form-control shadow-none\"></td>\n            </tr>\n            <tr>\n                <td>First name</td>\n                <td><input type=\"text\" formControlName=\"fname\" class=\"form-control shadow-none\"></td>\n            </tr>\n            <tr>\n                <td>Last name</td>\n                <td><input type=\"text\" formControlName=\"lname\" class=\"form-control shadow-none\"></td>\n            </tr>\n            <tr>\n                <td>Email</td>\n                <td><input type=\"text\" formControlName=\"email\" class=\"form-control shadow-none\"></td>\n            </tr>\n            <tr>\n                <td>Created</td>\n                <td><input type=\"text\" formControlName=\"created\" class=\"form-control shadow-none\"></td>\n            </tr>\n            <tr>\n                <td>IP</td>\n                <td><input type=\"text\" formControlName=\"ip\" class=\"form-control shadow-none\"></td>\n            </tr>\n        </tbody>\n    </table>\n    <hr>\n    <a [routerLink]=\"['/read-subscribers']\" class=\"float-right\">&lt;- Back</a>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { SubscribersService } from '../../service/subscribers.service';\nimport { Subscriber } from '../../model/subscriber';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-create-subscriber',\n  templateUrl: './create-subscriber.component.html',\n  styleUrls: ['./create-subscriber.component.css']\n})\nexport class CreateSubscriberComponent implements OnInit {\n\n  // crée un objet de type FormGroup\n  createSubscriberForm: FormGroup;\n  subscribers: Subscriber[];\n\n  constructor(\n    // injecte les services\n    private formBuilder: FormBuilder,\n    private subscribersService: SubscribersService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    // valide les champs\n    this.createSubscriberForm = this.formBuilder.group({\n      fname: ['', [Validators.required, Validators.maxLength(12)]],\n      lname: ['', [Validators.required, Validators.maxLength(12)]],\n      email: ['', [\n        Validators.required,\n        Validators.maxLength(30),\n        Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")\n      ]]\n    });\n  }\n\n  onSubmit(): void {\n    console.log(this.createSubscriberForm.value);\n    // passe en paramètre les données saisies à la méthode \"createSubscriber()\" du subscribersService\n    this.subscribersService.createSubscriber(this.createSubscriberForm.value).subscribe(\n      (data) => {\n        // console.log(data);\n        const link = ['read-subscribers'];\n        this.router.navigate(link);\n      },\n       (err) => {\n          console.log(err);\n       }\n      );\n  }\n}\n","<div class=\"mt-3 container section\">\n    <h2 class=\"mb-5\"><span class=\"spantitleh2\">Create</span> a subscriber</h2>\n    <div class=\"formContainer\">\n        <form [formGroup]=\"createSubscriberForm\" novalidate class=\"form\">\n            <div class=\"form-group\">\n                <label for=\"fname\">First name</label>\n                <input type=\"text\" formControlName=\"fname\" name=\"fname\" id=\"fname\" class=\"form-control shadow-none\" autofocus>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('fname').hasError('required') && createSubscriberForm.get('fname').touched\">Please, enter your first name.</div>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('fname').hasError('maxlength') && createSubscriberForm.get('fname').touched\">Your first name must have 12 characters max.</div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"lname\">Last name</label>\n                <input type=\"text\" formControlName=\"lname\" name=\"lname\" id=\"lname\" class=\"form-control shadow-none\">\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('lname').hasError('required') && createSubscriberForm.get('lname').touched\">Please, enter your last name.</div>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('lname').hasError('maxlength') && createSubscriberForm.get('lname').touched\">Your last name must have 12 characters max.</div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"email\">Email</label>\n                <input type=\"email\" formControlName=\"email\" name=\"email\" id=\"email\" class=\"form-control shadow-none\">\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('email').hasError('required') && createSubscriberForm.get('email').touched\">Please, enter your email.</div>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('email').hasError('maxlength') && createSubscriberForm.get('email').touched\">Your email must have 30 characters max.</div>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('email').hasError('pattern') && createSubscriberForm.get('email').touched\">Please enter a valid email</div>\n            </div>\n            <!-- <button class=\"btn btn-success\" [disabled]=\"createSubscriberForm.invalid\" *ngIf=\"btnvisibility\" (click)=\"onSubmit()\">Create</button> -->\n                <button class=\"shadow-none\" [disabled]=\"createSubscriberForm.invalid\" (click)=\"onSubmit()\">Create</button>\n        </form>\n    </div>\n    <hr>\n    <a [routerLink]=\"['/read-subscribers']\" class=\"float-right\">&lt;- Back</a>\n</div>\n","import { environment } from './../../environments/environment.prod';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  api = environment.api;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) { }\n\n  // connecte un utilisateur\n  logIn(loginData): Observable<any> {\n    return this.http.post<any>(`${this.api}/login.php`, loginData);\n  }\n\n  // déconnecte un utilisateur et le redirige vers l'accueil\n  logOut(): void {\n    localStorage.removeItem('token');\n    const link = [''];\n    this.router.navigate(link);\n  }\n\n  // vérifie si un utilisateur est connecté\n  isLogged(): boolean {\n    return !! localStorage.getItem('token');\n  }\n}\n","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nexport class LoginGuard implements CanActivate {\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot\r\n    ): boolean |\r\n    import('@angular/router').UrlTree |\r\n    import('rxjs').Observable<boolean |\r\n    import('@angular/router').UrlTree> |\r\n    Promise<boolean |\r\n    import('@angular/router').UrlTree> {\r\n        // récupère et convertit le token en un booléen (!!)\r\n        const token = localStorage.getItem('token');\r\n        return (!! token);\r\n    }\r\n}\r\n","import { environment } from './../../environments/environment.prod';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../model/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n\n  api = environment.api;\n\n  constructor(private http: HttpClient) { }\n\n  // crée un utilisateur\n  createUser(user: User): Observable<User[]> {\n    return this.http.post<User[]>(`${this.api}/register.php`, user);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"container\">\n    <h2 class=\"mt-2 mb-5\"><span class=\"spantitleh2\">CRUD</span> - Angular10/PHP7</h2>\n    <table class=\"table table-sm table-bordered w-100\">\n        <tbody>\n\n<!-- ENVIRONNEMENT -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>Environnement</h3></td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Se documenter</td>\n                <td class=\"p-5\"><a href=\"https://angular.io/\" target=\"_blank\" title=\"www.angular.io\">Documentation officielle Angular</a></td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Télécharger NodeJS</td>\n                <td class=\"p-5\"><a href=\"https://nodejs.org/en/\" target=\"_blank\" title=\"www.nodejs.org\">Télécharger NodeJS</a></td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Tester son installation</td>\n                <td class=\"p-5\">node --version</td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Ajouter l'extension Augury</td>\n                <td class=\"p-5\"><a href=\"https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd\" target=\"_blank\" title=\"www.chrome.google.com\">Ajouter Augury ds le Chrome Web Store</a></td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Ajouter des extensions sur Visual Studio Code</td>\n                <td class=\"p-5\">\n<pre>\nAngular Snippets (Version 9)\nangular2-inline\nAuto Import\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Installer Angular CLI</td>\n                <td class=\"p-5\">\n<pre>\n<a href=\"https://cli.angular.io/\" target=\"_blank\" title=\"www.cli.angular.io\">Documentation officielle Angular CLI</a>    \nnpm install -g @angular/cli\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Tester son installation</td>\n                <td class=\"p-5\">ng --version</td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer un projet Angular 10</td>\n                <td class=\"p-5\">\n<pre>\nng new my-app\nAdd Angular routing ? : Press Enter (No)\nStylesheet format would you like to use ? : Press Enter (CSS)\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Lancer le serveur</td>\n                <td class=\"p-5\">\n<pre>\nng serve\nng serve --o\nng serve --port 4201\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Installer Bootstrap</td>\n                <td class=\"p-5\">\n<pre>\nnpm i bootstrap --save\n\n<span class=\"comment\">// Modifier le fichier styles.css</span>\n@import \"~bootstrap/dist/css/bootstrap.css\";\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Installer Fontawesome</td>\n                <td class=\"p-5\">\n<pre>\nnpm i font-awesome --save\n\n<span class=\"comment\">// Modifier le fichier styles.css</span>\n@import \"~font-awesome/css/font-awesome.css\";\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Utiliser le data binding</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Interpolation</span>\n&#123; &#123; message &#125; &#125;\n\n<span class=\"comment\">// Property Binding</span>\n&lt;form [formGroup]=\"loginForm\"&gt;&lt;/form&gt;\n\n<span class=\"comment\">// Event Binding</span>\n&lt;form (ngSubmit)=\"onSubmit()\"&gt;&lt;/form&gt;\n&lt;button (click)=\"onSubmit()\"&gt;&lt;/button&gt;\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Utiliser des directives</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Parcourir un tableau</span>\n&lt;tr *ngFor=\"let user of users\"&gt;\n    &lt;td&gt;&#123; &#123; user.name &#125; &#125;&lt;/td&gt;\n&lt;/tr&gt;\n\n<span class=\"comment\">// Déclarer une condition</span>\n*ngIf=\"message\"\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Utiliser des pipes</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Formater des données</span>\n&#123; &#123; user.name|titlecase &#125; &#125;\n&#123; &#123; user.name|uppercase &#125; &#125;\n&#123; &#123; user.created|date:'dd/MM/yyyy H:mm' &#125; &#125;\n\n</pre>\n                </td>\n            </tr>\n\n<!-- BASE DE DONNEES -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>Base de données</h3></td>\n            <tr>    \n            <tr>\n                <td class=\"p-5\">Créer la bdd</td>\n                <td class=\"p-5\">CREATE DATABASE db_name</td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer une class User</td>\n                <td class=\"p-5\">\n<pre>\nng g class model/User\n\nexport class User &#123;\n    id: number;\n    email: string;\n    password: string;\n\n    constructor(id = 0, email = '', password = '') &#123;\n        this.id = id;\n        this.email = email;\n        this.password = password;\n    &#125;\n&#125;\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer une table users</td>\n                <td class=\"p-5\">\n<pre>\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTO_INCREMENT,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    ip VARCHAR(255) NOT NULL\n) ENGINE=InnoDB;\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer une table subscribers</td>\n                <td class=\"p-5\">\n<pre>\nCREATE TABLE subscribers (\n    id INTEGER PRIMARY KEY AUTO_INCREMENT,\n    fname VARCHAR(255) NOT NULL,\n    lname VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    ip VARCHAR(255) NOT NULL\n) ENGINE=InnoDB;\n</pre>\n                </td>\n            </tr>\n\n<!-- FORMULAIRE -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>Formulaire</h3></td>\n            <tr>\n            <tr>\n                <td class=\"p-5\">Générer un formulaire de connexion</td>\n                <td class=\"p-5\">\n<pre>\nng g c login\n\n<span class=\"comment\">// Modifier le fichier login.component.html</span>\n<small>&lt;h3 <span class=\"info\">*ngIf=\"message\"</span>&gt; &#123; &#123; message &#125; &#125;&lt;/h3&gt;\n&lt;div <span class=\"info\">*ngIf=\"invalidLogin\"</span>&gt;Invalid email or password. Please try again.&lt;/div&gt;\n\n&lt;form <span class=\"info\">[formGroup]</span>=\"loginForm\" <span class=\"info\">(ngSubmit)</span>=\"logIn()\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;input type=\"email\" id=\"email\" name=\"email\" <span class=\"info\">formControlName</span>=\"email\"&gt;\n        &lt;span <span class=\"info\">*ngIf=\"loginForm.controls['email'].hasError('required') && \n        loginForm.controls['email'].touched\"</span>&gt;\n            Please enter your email\n        &lt;/span&gt;\n        &lt;span <span class=\"info\">*ngIf=\"loginForm.controls['email'].hasError('pattern')\n        && loginForm.controls['email'].touched\"</span>>\n            Please enter a valid email.\n        &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;input type=\"password\" id=\"password\" name=\"password\" <span class=\"info\">formControlName</span>=\"password\"&gt;\n        &lt;span <span class=\"info\">*ngIf=\"loginForm.controls['password'].hasError('required') && \n        loginForm.controls['password'].touched\"</span>&gt;\n            Please enter your password\n        &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;button <span class=\"info\">[disabled]=\"loginForm.invalid\"</span>&gt;&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/form&gt;</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Générer un formulaire d'inscription</td>\n                <td class=\"p-5\">\n<pre>\nng g c register\n\n<span class=\"comment\">// Modifier le fichier register.component.html</span>\n<small>&lt;form <span class=\"info\">[formGroup]</span>=\"registerForm\" <span class=\"info\">(ngSubmit)</span>=\"createUser()\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"email\"&lt;Email&lt;/label&gt;\n        &lt;input type=\"email\" id=\"email\" name=\"email\" <span class=\"info\">formControlName</span>=\"email\"&gt;\n        &lt;span <span class=\"info\">*ngIf=\"registerForm.controls['email'].hasError('required')\n        && registerForm.controls['email'].touched\"</span>&gt;\n            Please enter your email.\n        &lt;/span&gt;\n        &lt;span <span class=\"info\">*ngIf=\"registerForm.controls['email'].hasError('pattern')\n        && registerForm.controls['email'].touched\"</span>&gt;\n            Please enter a valid email.\n        &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n        &lt;input type=\"password\" id=\"password\" name=\"password\" <span class=\"info\">formControlName</span>=\"password\"&gt;\n        &lt;span <span class=\"info\">*ngIf=\"registerForm.controls['password'].hasError('required')\n        && registerForm.controls['password'].touched\"</span>&gt;\n            Please enter your password.\n        &lt;/span&gt;\n        &lt;span <span class=\"info\">*ngIf=\"registerForm.controls['password'].hasError('minlength')\n        && registerForm.controls['password'].touched\"</span>&gt;\n            Your password should be at least 6 characters.\n        &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group form-check\"&gt;\n        &lt;input type=\"checkbox\" id=\"agreeTerms\" name=\"checkbox\" <span class=\"info\">formControlName</span>=\"agreeTerms\"\n        class=\"form-check-input\"&gt;\n        &lt;label for=\"agreeTerms\" class=\"form-check-label\"&gt;Agree terms&lt;/label&gt;     \n        &lt;span <span class=\"info\">*ngIf=\"isSubmitted && registerForm.controls['agreeTerms'].hasError('required')\n        && registerForm.controls['agreeTerms'].untouched\"</span>&gt;\n            You must agree Terms & Conditions.\n        &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;button&gt;Sign up&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/form&gt;</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Importer les modules FormsModule et ReactiveFormsModule</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Modifier le fichier app.modules.ts</span>    \nimport &#123; FormsModule &#125; from '@angular/forms';\nimport &#123; ReactiveFormsModule &#125; from '@angular/forms';\n\nimports: [\n    FormsModule,\n    ReactiveFormsModule,\n]\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer des routes</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Créer un fichier app/app.routing.ts</span>\nimport &#123; RouterModule, Routes &#125; from '@angular/router';\nimport &#123; HomeComponent &#125; from './home/home.component';\nimport &#123; RegisterComponent &#125; from './security/register/register.component';\nimport &#123; LoginComponent &#125; from './security/login/login.component';\n\nconst routes: Routes = [\n    &#123; path: '', component: HomeComponent, pathMatch: 'full'&#125;,\n    &#123; path: 'register', component: RegisterComponent&#125;,\n    &#123; path: 'login', component: LoginComponent t&#125;,\n];\nexport const AppRoutes = RouterModule.forRoot(routes);\n\n<span class=\"comment\">// Modifier le fichier app.module.ts</span>\nimport &#123; AppRoutes &#125; from './app.routes';\nimports: [\n    AppRoutes\n]\n\n<span class=\"comment\">// Modifier le fichier header.component.html</span>\n&lt;li&gt;&lt;a [routerLink]=\"['']\" routerLinkActive=\"active\">Home&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a [routerLink]=\"['/register']\" routerLinkActive=\"active\">Sign up&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a [routerLink]=\"['/login']\" routerLinkActive=\"active\">Sign in&lt;/a&gt;&lt;/li&gt;\n\n<span class=\"comment\">// Modifier le fichier app.component.html</span>\n&lt;app-header&gt;&lt;/app-header&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;app-footer&gt;&lt;/app-footer&gt;</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">WebResponsive navbar sans javascript de bootstrap</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Modifier le fichier header.component.html</span>    \n&lt;button <span class=\"info\">(click)=\"show()\"</span> class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" \n    data-target=\"#navbarNav\"&gt;\n    &lt;span class=\"navbar-toggler-icon\"&gt;&lt;i class=\"fa fa-bars text-primary\"&gt;&lt;/i&gt;&lt;/span&gt;\n&lt;/button&gt;\n&lt;div <span class=\"info\">[ngClass]=\"&#123; show: visibility &#125;\"</span> class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n\n<span class=\"comment\">// Modifier le fichier header.component.ts</span>\nvisibility = false;\n<span class=\"comment\">// affiche et cache les onglets de la navbar</span>\nshow(): boolean &#123;\n    return this.visibility = !this.visibility;\n&#125;</small>\n</pre>\n                </td>\n            </tr>\n\n<!-- VALIDATION DES FORMULAIRES -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>Validation des formulaires</h3></td>\n            <tr>\n            <tr>\n                <td class=\"p-5\">Créer des contraintes de validation pour le formulaire de connexion</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Modifier le fichier login.component.ts</span>\n<small>import &#123; FormGroup, FormBuilder, Validators &#125; from '@angular/forms';\nimport &#123; LoginService &#125; from '../login.service';\nimport &#123; Router &#125; from '@angular/router';\n\nexport class LoginComponent implements OnInit &#123;\n    <span class=\"comment\">// crée un objet de type FormGroup</span>\n    loginForm: FormGroup;\n    invalidLogin = false;\n    message: any;\n\n    constructor(\n        <span class=\"comment\">// injecte les services</span>\n        private formBuilder: FormBuilder,\n        private loginService: LoginService,\n        private router: Router\n    ) &#123; &#125;\n\n    ngOnInit(): void &#123;\n        <span class=\"comment\">// valide les champs</span>\n        this.loginForm = this.formBuilder.group(&#123;\n            email: ['', [\n                Validators.required,\n                Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]&#123;2,4&#125;$')\n            ]],\n            password: ['', [ Validators.required ]]\n        &#125;);\n    &#125;\n\n    <span class=\"comment\">// connecte un utilisateur</span>\n    logIn(): void &#123;\n        console.log(this.loginForm.value);\n        <span class=\"comment\">// Empêche l'envoi si les données sont invalides</span>\n        if (this.loginForm.invalid) &#123;\n            return;\n        &#125;\n\n        <span class=\"comment\">// récupère les données saisies</span>\n        const loginData = &#123;\n            email: this.loginForm.controls.email.value,\n            password: this.loginForm.controls.password.value,\n        &#125;;\n\n        <span class=\"comment\">// passe en paramètre les données saisies à la méthode \"logIn()\" du loginService</span>\n        this.loginService.login(loginData).subscribe(\n            (response) => &#123;\n                // console.log(response);\n                this.message = response.message;\n                // console.log(response.token);\n                <span class=\"comment\">// Si token == true -> redirige vers la page 'read-subscribers'</span>\n                if (response.token) &#123;\n                    localStorage.setItem('token', response.token);\n                    const link = ['read-subscribers'];\n                    this.router.navigate(link);\n                &#125; else &#123;\n                    this.invalidLogin = true;\n                &#125;\n            &#125;\n        );\n    &#125;\n&#125;</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer des contraintes de validation pour le formulaire d'inscription</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Modifier le fichier register.component.ts</span>\n<small>import &#123; FormGroup, FormBuilder, Validators &#125; from '@angular/forms';\nimport &#123; RegisterService &#125; from '../../service/register.service';\nimport &#123; Router &#125; from '@angular/router';\n\nexport class RegisterComponent implements OnInit &#123;\n  <span class=\"comment\">// crée un objet de type FormGroup</span>\n  registerForm: FormGroup;\n  isSubmitted = false;\n\n  constructor(\n    <span class=\"comment\">// injecte les services</span>\n    private formBuilder: FormBuilder,\n    private registerService: RegisterService,\n    private router: Router\n  ) &#123; &#125;\n\n  ngOnInit(): void &#123;\n    <span class=\"comment\">// valide les champs</span>\n    this.registerForm = this.formBuilder.group(&#123;\n      email: ['', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]&#123;2,4&#125;$')]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      agreeTerms: [false, Validators.requiredTrue]\n    &#125;);\n  &#125;\n\n  <span class=\"comment\">// crée un utilisateur</span>\n  createUser(): void &#123;\n    this.isSubmitted = true;\n    console.log(this.registerForm.value);\n\n    <span class=\"comment\">// Empêche l'envoi si les données sont invalides</span>\n    if (this.registerForm.invalid) &#123;\n      return;\n    &#125;\n\n    <span class=\"comment\">// passe en paramètre les données saisies à la méthode \"createUser()\" du registerService</span>\n    this.registerService.createUser(this.registerForm.value).subscribe(\n      (response) => &#123;\n        console.log(response);\n        // redirige vers la page 'login'\n        const link = ['login'];\n        this.router.navigate(link);\n      &#125;,\n      (error) => &#123;\n        console.log(error);\n      &#125;\n    );\n  &#125;\n&#125;\n</small>\n</pre>\n                </td>\n            </tr>\n\n<!-- SERVICES -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>Services</h3></td>\n            <tr>\n            <tr>\n                <td class=\"p-5\">Importer le module HttpClientModule</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Modifier le fichier app.modules.ts</span>\n<span class=\"comment\">!!! Corrige l'erreur NullInjectorError(AppModule)[HttpClient] !!!</span>    \nimport &#123; HttpClientModule &#125; from '@angular/common/http';\n\nimports: [\n    HttpClientModule\n]\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Générer un service login</td>\n                <td class=\"p-5\">\n<pre>\nng g s login\n\n<span class=\"comment\">// Modifier le fichier login.service.ts</span>\nimport &#123; HttpClient &#125; from '@angular/common/http';\nimport &#123; Observable &#125; from 'rxjs';\n\nconstructor(private http: HttpClient,) &#123; &#125;\n\napi = 'http://localhost:8080/my_Angular_CRUD_App/api';\n\n<span class=\"comment\">// Passer les données saisies à l'api login.php</span>\n<span class=\"comment\">// connecte un utilisateur</span>\nlogIn(loginData): Observable&lt;any&gt; &#123;\n    return this.http.post&lt;any&gt;(`$&#123;this.api&#125;/login.php`, loginData);\n&#125;\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Générer un service register</td>\n                <td class=\"p-5\">\n<pre>\nng g s register\n\n<span class=\"comment\">// Modifier le fichier register.service.ts</span>\nimport &#123; HttpClient &#125; from '@angular/common/http';\nimport &#123; Observable &#125; from 'rxjs';\nimport &#123; User &#125; from '../model/user';\n\napi = 'http://localhost:8080/my_Angular_CRUD_App/api';\n\nconstructor(private http: HttpClient) &#123; &#125;\n\n<span class=\"comment\">// crée un utilisateur</span>\ncreateUser(user: User): Observable&lt;User[]&gt; &#123;\n    return this.http.post&lt;User[]&gt;(`$&#123;this.api&#125;/register.php`, user);\n&#125;\n</pre>\n                </td>\n            </tr>\n\n<!-- REST API : PHP/MySQL -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>REST API : PHP/MySQL</h3></td>\n            <tr>\n            <tr>\n                <td class=\"p-5\">Paramétrer la bdd</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Créer un fichier api/config_db.php</span>\n&lt;?php\n    class Database &#123;\n        private static $dbHost = \"localhost\";\n        private static $dbName = \"db_name\";\n        private static $dbUser = \"root\";\n        private static $dbUserPassword = \"\";\n\n        private static $connection = null;\n\n        public static function connect() &#123;\n            try &#123;\n                self::$connection = new PDO(\"mysql:\n                    host=\" . self::$dbHost . \";\n                    dbname=\" . self::$dbName,\n                    self::$dbUser,\n                    self::$dbUserPassword\n                );\n                self::$connection->setAttribute(\n                    PDO::ATTR_ERRMODE, \n                    PDO::ERRMODE_EXCEPTION\n                );\n            &#125;\n            catch(PDOException $e) &#123;\n                die($e->getMessage());\n            &#125;\n            return self::$connection;\n        &#125;\n        \n        public static function disconnect() &#123;\n            self::$connection = null;\n        &#125;\n    &#125;\n?&gt;</small> \n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer l'API login</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Créer le fichier api/login.php</span>\n&lt;?php\n    <span class=\"comment\">// corrige l'erreur \"Access to XMLHttpRequest blocked by CORS policy\"</span>\n    header(\"Access-Control-Allow-Origin: *\");\n    header(\"Access-Control-Allow-Methods: POST, DELETE, PUT, GET\");\n    header(\"Access-Control-Allow-Headers: \n    Origin, X-Requested-With, Content-Type, Accept\");\n\n    require 'config_db.php';\n\n    <span class=\"comment\">// récupère les données saisies au format json</span>\n    $postdata = file_get_contents(\"php://input\");\n\n    if(isset($postdata) && !empty($postdata)) &#123;\n        <span class=\"comment\">// transforme les données au format array</span>\n        $request = json_decode($postdata);\n\n        <span class=\"comment\">// nettoie et sécurise les données saisies</span>\n        $email = stripslashes(htmlspecialchars(trim($request->email)));\n        $password = stripslashes(htmlspecialchars(trim($request->password)));\n\n        <span class=\"comment\">// vérifie l'existence du login et du password</span>\n        $connection = Database::connect();\t\n        $sql = 'SELECT id FROM users WHERE email = ? AND password = ?';\t\n        $req = $connection->prepare($sql);\n        $req->execute(array($email, $password));\t\n        $numRows = $req->rowCount();\n        \n        <span class=\"comment\">// S'ils existent ds la db</span>\n        if($numRows > 0) &#123;\n            <span class=\"comment\">// Transforme les données saisies au format json</span>\n            echo json_encode(array(\n                \"email\" => $email,\n                \"password\" => $password,\n                \"message\" => \"Successfull login\"\n            ));\n            http_response_code(200);\n        &#125; else &#123;\n            // http_response_code(401);\n            echo json_encode(array(\"message\" => \"Login failed\"));\n        &#125;\n        Database::disconnect();\n    &#125;\n?&gt;</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer l'API register</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Créer le fichier api/register.php</span>\n&lt;?php\n    <span class=\"comment\">// corrige l'erreur \"Access to XMLHttpRequest blocked by CORS policy\"</span>\n    header(\"Access-Control-Allow-Origin: *\");\n    header(\"Access-Control-Allow-Methods: POST, DELETE, PUT, GET\");\n    header(\"Access-Control-Allow-Headers: \n    Origin, X-Requested-With, Content-Type, Accept\");\n\n    require 'config_db.php';\n    $connection = Database::connect();\n\n    <span class=\"comment\">// récupère les données saisies au format json</span>\n    $postdata = file_get_contents(\"php://input\");\n\n    if(isset($postdata) && !empty($postdata)) &#123;\n        <span class=\"comment\">// transforme les données au format array</span>\n        $request = json_decode($postdata);\n\n        <span class=\"comment\">// nettoie et sécurise les données saisies</span>\n        $email = stripslashes(htmlspecialchars(trim($request->email)));\n        $password = stripslashes(htmlspecialchars(trim($request->password)));\n        $email = filter_var($email, FILTER_VALIDATE_EMAIL);\t\n\n        if(empty($email) || empty($password)) &#123;\n            echo \"Tous les champs n'ont pas été remplis\";\n        &#125; else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123;  \n            echo \"Adresse email invalide\"; \n        &#125; else &#123;\n            <span class=\"comment\">// insère les données saisies ds la bdd</span>\n            $sql = 'INSERT INTO users (email, password, created, ip) \n                    VALUES(:email, :password, now(), :ip)';\t\n            $req = $connection->prepare($sql);\n            $req->execute(array(\n                'email' => $email,\n                'password' => $password, \n                'ip' => $_SERVER['REMOTE_ADDR']\n            ));\n        &#125;\n        exit(); \n        Database::disconnect();\n    &#125;\n\n    if($connection) &#123;\n        http_response_code(201);\t\n    &#125; \n    else &#123;\n        http_response_code(422);\n    &#125;\n?&gt;\n\n<span class=\"comment\">// Débugguer dans le navigateur</span>\nNavigateur Firefox : Network - POST - Response - JSON\n</small>\n</pre>\n                </td>\n            </tr>\n\n<!-- SECURITE -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>Sécurité</h3></td>\n            <tr>\n            <tr>\n                <td class=\"p-5\">Authentifier l'utilisateur avec un token</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Modifier le fichier login.php</span>\n$token = null;\necho json_encode(array(\"token\" => \"token-123456789\"));\n\n<span class=\"comment\">// Modifier le fichier login.component.ts</span>\nthis.loginService.login(loginData).subscribe(\n    (response) => &#123;\n        // console.log(response);\n        this.message = response.message;\n\n        if (response.token) &#123;\n            window.localStorage.setItem('token', response.token);\n            // const link = ['read-subscribers'];\n            // this.router.navigate(link);\n        &#125; else &#123;\n            this.invalidLogin = true;\n        &#125;\n    );\n}\n\n<span class=\"comment\">// Débugguer dans le navigateur</span>\nNavigateur Firefox : Storage / localStorage</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Se déconnecter</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Modifier le fichier header.component.html</span>\n<span class=\"comment\">// appelle la méthode logOut() du fichier typescript</span>\n&lt;li&gt;&lt;a (click)=\"logOut()\"&gt;Sign out&lt;/a&gt;&lt;/li&gt;\n\n<span class=\"comment\">// Modifier le fichier header.component.ts</span>\nimport &#123; LoginService &#125; from '../login.service';\n<span class=\"comment\">// retourne la méthode logOut() du service loginService</span>\nlogOut(): void &#123;\n    this.loginService.logOut();\n&#125;\n\n<span class=\"comment\">// Modifier le fichier login.service.ts</span>\nimport &#123; Router &#125; from '@angular/router';\n<span class=\"comment\">// déconnecte un utilisateur et le redirige vers l'accueil</span>\nlogOut(): void &#123;\n    localStorage.removeItem('token');\n    const link = [''];\n    this.router.navigate(this.link);\n&#125;</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer un fichier  interceptor/login.interceptor.ts</td>\n                <td class=\"p-5\">\n<pre>\n<small>import &#123; HttpInterceptor, HttpRequest, HttpHandler,\nHttpEvent, HTTP_INTERCEPTORS, HttpParams &#125; from '@angular/common/http';\nimport &#123; Observable &#125; from 'rxjs';\n\nexport class LoginInterceptor implements HttpInterceptor &#123;\n    <span class=\"comment\">intercept(</span>\n        req: HttpRequest&lt;any&gt;,\n        next: HttpHandler\n    <span class=\"comment\">)</span>: Observable&lt;HttpEvent&lt;any&gt;&gt; &#123;\n        const token = localStorage.getItem('token');\n        if (token) &#123;\n            const cloneReq = req.<span class=\"comment\">clone(</span>\n                &#123; params: new HttpParams().set('access_token', token) &#125; \n            <span class=\"comment\">)</span>;\n            return next.handle(cloneReq);\n        &#125; else &#123;\n            return next.handle(req);\n        &#125;\n    &#125;\n&#125;\n\nexport const LoginInterceptorProvider = &#123;\n  provide: HTTP_INTERCEPTORS,\n  useClass: LoginInterceptor,\n  multi: true,\n&#125;;</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer un fichier guard/login.guard.ts</td>\n                <td class=\"p-5\">\n<pre>\n<small>import &#123; CanActivate, ActivatedRouteSnapshot,\n    RouterStateSnapshot &#125; from '@angular/router';\n\nexport class LoginGuard implements CanActivate &#123;\n    <span class=\"comment\">canActivate(</span>\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n    <span class=\"comment\">)</span>: boolean | \n    import('@angular/router').UrlTree |\n    import('rxjs').Observable&lt;boolean | \n    import('@angular/router').UrlTree&gt; | \n    Promise&lt;boolean | import('@angular/router').UrlTree&gt; &#123;\n        <span class=\"comment\">// récupère et convertit le token en un booléen (!!)</span>\n        const token = localStorage.getItem('token'); \n        return (!! token);\n    &#125;\n&#125;</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer un fichier guard/logout.guard.ts</td>\n                <td class=\"p-5\">\n<pre>\n<small>import &#123; CanActivate, ActivatedRouteSnapshot,\n    RouterStateSnapshot &#125; from '@angular/router';\n\nexport class LogoutGuard implements CanActivate &#123;\n    <span class=\"comment\">canActivate(</span>\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n    <span class=\"comment\">)</span>: boolean |\n    import('@angular/router').UrlTree |\n    import('rxjs').Observable&lt;boolean |\n    import('@angular/router').UrlTree&gt; |\n    Promise&lt;boolean | import('@angular/router').UrlTree&gt; &#123; \n        const token = localStorage.getItem('token');\n        if (token) &#123;\n            return false; \n        &#125; else &#123;\n            return true;\n        &#125;\n    &#125;\n&#125;</small>   \n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Restreindre l'accès à certaines fonctionnalités</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Modifier le fichier app.module.ts</span>\nimport &#123; LoginInterceptorProvider &#125; from './security/interceptor/login.interceptor';\nimport &#123; LoginGuard &#125; from './security/guard/login.guard';\nimport &#123; LogoutGuard &#125; from './security/guard/logout.guard';\nproviders: [\n    LoginInterceptorProvider,\n    LoginGuard,\n    LogoutGuard\n]\n\n<span class=\"comment\">// Modifier le fichier app.routes.ts</span>\nimport &#123; LoginGuard &#125; from './security/guard/login.guard';\nimport &#123; LogoutGuard &#125; from './security/guard/logout.guard';\nconst routes: Routes = [\n    &#123; path: '', component: HomeComponent, pathMatch: 'full' &#125;,\n    &#123; path: 'register', component: RegisterComponent, <span class=\"comment\">canActivate: [LogoutGuard]</span> &#125;,\n    &#123; path: 'login', component: LoginComponent, <span class=\"comment\">canActivate: [LogoutGuard]</span> &#125;,\n    &#123; path: 'create-subscriber', component: CreateSubscriberComponent, <span class=\"comment\">canActivate: [LoginGuard]</span> &#125;,\n    &#123; path: 'read-subscribers', component: ReadSubscribersComponent, <span class=\"comment\">canActivate: [LoginGuard]</span> &#125;,\n    &#123; path: 'update-subscriber/:id', component: UpdateSubscriberComponent, <span class=\"comment\">canActivate: [LoginGuard]</span> &#125;,\n    &#123; path: 'read-subscriber/:id', component: ReadSubscriberComponent &#125;,\n];</small>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Cacher certains éléments</td>\n                <td class=\"p-5\">\n<pre>\n<small><span class=\"comment\">// Modifier le fichier header.component.html</span>\n&lt;li <span class=\"comment\">*ngIf=\"!isLogged()\"</span>&gt;&lt;a [routerLink]=\"['/register']\"&gt;Sign up&lt;/a&gt;&lt;/li&gt;\n&lt;li <span class=\"comment\">*ngIf=\"!isLogged()\"</span>&gt;&lt;a [routerLink]=\"['/login']\"&gt;Sign in&lt;/a&gt;&lt;/li&gt;\n&lt;li <span class=\"comment\">*ngIf=\"isLogged()\"</span>&gt;&lt;a [routerLink]=\"['/read-subscribers']\"&gt;myAccount&lt;/a&gt;&lt;/li&gt;\n&lt;li <span class=\"comment\">*ngIf=\"isLogged()\"</span>&gt;&lt;a [routerLink]=\"['']\" (click)=\"logOut()\"&gt;Sign out&lt;/a&gt;&lt;/li&gt;\n\n<span class=\"comment\">// Modifier le fichier header.component.ts</span>\n<span class=\"comment\">// retourne la méthode isLogged du loginService</span>\nisLogged(): boolean &#123;\n    return this.loginService.isLogged();\n&#125;\n\n<span class=\"comment\">// Modifier le fichier login.service.ts</span>\n<span class=\"comment\">// vérifie si un utilisateur est connecté</span>\nisLogged(): boolean &#123;\n    return !! localStorage.getItem('token');\n&#125;\n</small>\n</pre>\n                </td>\n            </tr>\n\n<!-- PAGINATION -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>Pagination</h3></td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Installer le module ngx-pagination</td>\n                <td class=\"p-5\">\n<pre>\n<a href=\"https://www.npmjs.com/\" target=\"_blank\" title=\"www.npmjs.com\">Search packages npm</a>\n<a href=\"https://www.npmjs.com/package/ngx-pagination\" target=\"_blank\" title=\"www.npmjs.com\">ngx-pagination</a>\n\nnpm i ngx-pagination\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Importer le module ngx-pagination</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Modifier le fichier app.module.ts</span>\nimport &#123; NgxPaginationModule &#125; from 'ngx-pagination';\n\nimports: [\n    NgxPaginationModule\n]\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Implémenter le module ngx-pagination</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Modifier le fichier subscribers.component.ts</span>\ntotalRecords: number;\npage: Number = 1;\n\nngOnInit(): void &#123;\n    this.subscribersService.readSubscribers().subscribe((response) => &#123;\n        this.totalRecords = response.length;\n    &#125;);\n&#125;\n\n<span class=\"comment\">// Modifier le fichier subscribers.component.html</span>\n*ngFor=\"let subscriber of subscribers | paginate: &#123;\n    id: 'listing_pagination',\n    itemsPerPage: 5,\n    currentPage: page,\n    totalItems: totalRecords\n&#125;\"\n\n&lt;div class=\"navigation\"&gt;\n    &lt;pagination-controls\n        id=\"listing_pagination\"\n        maxSize=\"5\"\n        directionLinks=\"true\"\n        (pageChange)=\"page = $event\"\n    &gt;&lt;/pagination-controls&gt;\n&lt;/div&gt;\n</pre>\n                </td>\n            </tr>\n\n<!-- DEPLOIEMENT -->\n\n            <tr>\n                <td colspan=\"2\" class=\"h3-cli-ang10\"><h3>Déploiement</h3></td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer un compte Heroku</td>\n                <td class=\"p-5\"><a href=\"https://signup.heroku.com/\" target=\"_blank\" title=\"www.signup.heroku.com\">Créer un compte Heroku</a></td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer une nouvelle application</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Se rendre sur le tableau de bord</span>\nNew / Create new app\nApp name : my-angular10-crud-app\nChoose a region : Europe / Create app\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Installer Heroku CLI</td>\n                <td class=\"p-5\"><a href=\"https://devcenter.heroku.com/articles/heroku-cli\" target=\"_blank\" title=\"www.devcenter.heroku.com\">Télécharger et exécuter Heroku CLI</a></td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Tester son installation</td>\n                <td class=\"p-5\">heroku -v</td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Mettre à jour Heroku</td>\n                <td class=\"p-5\">heroku update</td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Se connecter à Heroku</td>\n                <td class=\"p-5\">\n<pre>\nheroku login\nTapez n'importe quel touche autre que q pour ouvrir un navigateur\nCliquez sur Log in\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Modifier son package.json</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Installer express</span>\nnpm i express --save\n\n\"scripts\": &#123;\n    \"start\": \"node server.js\"\n&#125;\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Créer un fichier server.js à la racine du projet</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Modifier le fichier server.js</span>\nconst express = require('express');\n\nconst app = express();\n\napp.use(express.static('./dist/my-angular10-crud-app'));\n\napp.get('/*', (req, res) =>\n    res.sendFile('index.html', &#123;root: 'dist/my-angular10-crud-app/'&#125;),\n);\n\napp.listen(process.env.PORT || 8080);\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Déployer l'application</td>\n                <td class=\"p-5\">\n<pre>\ncd my-angular10-crud-app\ngit init\ngit add .\ngit commit -m \"project init\"\nheroku git:remote -a my-angular10-crud-app\ngit push heroku master\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Installer un Add-ons sur Heroku</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Se rendre sur le tableau de bord (Ressources)</span>\nEx : JawsDB MySQL\n\n<a href=\"https://www.jawsdb.com/docs/\" target=\"_blank\" title=\"www.jawsdb.com\">Documentation officielle JawsDB</a>\n</pre>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"p-5\">Se connecter à la nouvelle bdd</td>\n                <td class=\"p-5\">\n<pre>\n<span class=\"comment\">// Modifier son fichier api/config_db.php</span>\n\n<span class=\"comment\">// Télécharger MySQL Workbench</span>\n<a href=\"https://dev.mysql.com/downloads/workbench/\" target=\"_blank\" title=\"www.dev.mysql.com\">Télécharger MySQL Workbench</a>\n\n<span class=\"comment\">// Connecter sa nouvelle bdd</span>\nCliquer sur + MySQL Connections\nRenseigner : Connection Name - Hostname - Username - Password\n</pre>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  api: 'https://www.fatimabenzaoui.com/api'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row\">\n    <div class=\"col-md-12 divfooter\">\n        <footer>\n            <div class=\"partie-footer\">\n                <ul class=\"reseauxsociaux\">\n                    <li><a href=\"https://github.com/fatimabenzaoui\" target=\"_blank\" class=\"fa fa-github-square\"></a></li>\n                    <li><a href=\"https://www.facebook.com/benzaouifatima\" target=\"_blank\" class=\"fa fa-facebook-square\"></a></li>\n                    <li><a href=\"https://www.instagram.com/fatimabenzaoui\" target=\"_blank\" class=\"fa fa-instagram\"></a></li>\n                    <li><a href=\"https://www.linkedin.com/in/fatima-benzaoui\" target=\"_blank\" class=\"fa fa-linkedin\"></a></li>\n                    <li><a href=\"https://twitter.com/fatimabenzaoui\" target=\"_blank\" class=\"fa fa-twitter-square\"></a></li>\n                </ul>\n                <div class=\"copyright\">&copy; 2020 | Fatima Benzaoui | All Rights Reserved</div>\n            </div>\n        </footer>\n    </div>\n</div>\n","import { environment } from './../../environments/environment.prod';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  api = environment.api;\n\n  constructor(private http: HttpClient) {}\n\n  // envoie un email\n  sendEmail(contactData: any): Observable<any> {\n    return this.http.post<any>(this.api + '/contact.php', contactData);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { LoginService } from '../../service/login.service';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  // crée un objet de type FormGroup\n  loginForm: FormGroup;\n  message: any;\n  invalidLogin = false;\n\n  constructor(\n    // injecte les services\n    private formBuilder: FormBuilder,\n    private loginService: LoginService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    // valide les champs\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      password: ['', Validators.required]\n    });\n  }\n\n  // connecte un utilisateur\n  logIn(): void {\n    // console.log(this.loginForm.value);\n    // Empêche l'envoi si les données sont invalides\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    // Récupère les données saisies\n    const loginData = {\n      email: this.loginForm.controls.email.value,\n      password: this.loginForm.controls.password.value,\n    };\n\n    // Passe en paramètre les données saisies à la méthode \"logIn()\" du loginService\n    this.loginService.logIn(loginData).subscribe(\n      (response) => {\n        // console.log(response);\n        this.message = response.message;\n        // console.log(response.token);\n        // Si token == true -> redirige vers la page 'read-subscribers'\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          const link = ['read-subscribers'];\n          this.router.navigate(link);\n        } else {\n          this.invalidLogin = true;\n        }\n      }\n    );\n  }\n}\n","<div class=\"mt-3 section\">\n    <h2 class=\"mb-5\"><span class=\"spantitleh2\">Sign</span> in</h2>\n    <div class=\"formContainer\">\n        <h3 *ngIf=\"message\" class=\"text-danger text-center\"> {{ message }}</h3>\n        <div *ngIf=\"invalidLogin\" class=\"text-danger text-center\">Invalid email or password. Please try again.</div>\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"logIn()\">\n            <div class=\"form-group\">\n                <label for=\"email\">Email</label>\n                <input type=\"email\" id=\"email\" name=\"email\" formControlName=\"email\" class=\"form-control shadow-none\" autofocus autocomplete=\"username\">\n                <span class=\"text-danger\" *ngIf=\"loginForm.controls['email'].hasError('required') && loginForm.controls['email'].touched\">Please enter your email</span>\n                <span class=\"text-danger\" *ngIf=\"loginForm.controls['email'].hasError('pattern') && loginForm.controls['email'].touched\">Please enter a valid email</span>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" formControlName=\"password\" class=\"form-control shadow-none\" autocomplete=\"current-password\">\n                <span class=\"text-danger\" *ngIf=\"loginForm.controls['password'].hasError('required') && loginForm.controls['password'].touched\">Please enter your password</span>\n            </div>\n            <div class=\"form-group\">\n                <button type=\"submit\" [disabled]=\"loginForm.invalid\">Sign in</button>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../../service/login.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  visibility = false;\n\n  constructor(\n    private loginService: LoginService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  // affiche et cache les onglets de la navbar\n  show(): boolean {\n    return this.visibility = !this.visibility;\n  }\n\n  // retourne la méthode logOut() du service loginService\n  logOut(): void {\n    this.loginService.logOut();\n  }\n\n  // retourne la méthode isLogged du loginService\n  isLogged(): boolean {\n    return this.loginService.isLogged();\n  }\n}\n","<div class=\"container-fluid\">\n  <nav class=\"navbar navbar-expand-lg\">\n    <a class=\"navbar-brand mr-auto\" href=\"#\">CRUD_Angular10_PHP7</a>\n    <span (click)=\"show()\" class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"><i class=\"fa fa-bars mt-2 ml-4\"></i></span>\n    </span>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNav\" [ngClass]=\"{show: visibility}\">\n      <ul class=\"navbar-nav ml-auto\">\n        <li class=\"nav-item\"><a class=\"nav-link\" [routerLink]=\"['']\" routerLinkActive=\"active\">Home</a></li>\n        <li *ngIf=\"!isLogged()\" class=\"nav-item\"><a class=\"nav-link\" [routerLink]=\"['/register']\" routerLinkActive=\"active\">Sign up</a></li>\n        <li *ngIf=\"!isLogged()\" class=\"nav-item\"><a class=\"nav-link\" [routerLink]=\"['/login']\" routerLinkActive=\"active\">Sign in</a></li>\n        <li *ngIf=\"isLogged()\" class=\"nav-item\"><a class=\"nav-link\" [routerLink]=\"['/read-subscribers']\" routerLinkActive=\"active\">myAccount</a></li>\n        <li *ngIf=\"isLogged()\" class=\"nav-item\"><a class=\"nav-link\" [routerLink]=\"['']\" routerLinkActive=\"active\" (click)=\"logOut()\">Sign out</a></li>\n        <li class=\"nav-item\"><a class=\"nav-link\" [routerLink]=\"['/contact']\" routerLinkActive=\"active\">Contact</a></li>\n      </ul>\n    </div>\n  </nav>\n</div>\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { RegisterComponent } from './security/register/register.component';\r\nimport { LoginComponent } from './security/login/login.component';\r\nimport { ContactComponent } from './contact/contact.component';\r\nimport { CreateSubscriberComponent } from './subscriber/create-subscriber/create-subscriber.component';\r\nimport { ReadSubscribersComponent } from './subscriber/read-subscribers/read-subscribers.component';\r\nimport { UpdateSubscriberComponent } from './subscriber/update-subscriber/update-subscriber.component';\r\nimport { ReadSubscriberComponent } from './subscriber/read-subscriber/read-subscriber.component';\r\nimport { LoginGuard } from './security/guard/login.guard';\r\nimport { LogoutGuard } from './security/guard/logout.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent, pathMatch: 'full' },\r\n  { path: 'register', component: RegisterComponent, canActivate: [LogoutGuard] },\r\n  { path: 'login', component: LoginComponent, canActivate: [LogoutGuard] },\r\n  { path: 'create-subscriber', component: CreateSubscriberComponent, canActivate: [LoginGuard] },\r\n  { path: 'read-subscribers', component: ReadSubscribersComponent, canActivate: [LoginGuard] },\r\n  { path: 'update-subscriber/:id', component: UpdateSubscriberComponent, canActivate: [LoginGuard] },\r\n  { path: 'read-subscriber/:id', component: ReadSubscriberComponent },\r\n  { path: 'contact', component: ContactComponent }\r\n];\r\n\r\nexport const AppRoutes = RouterModule.forRoot(routes, {\r\n    initialNavigation: 'enabled'\r\n});\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'my-angular10-crud-app';\n}\n","<app-header></app-header>\n<div class=\"container\">\n    <router-outlet></router-outlet>\n</div>\n<app-footer></app-footer>","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nexport class LogoutGuard implements CanActivate {\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot\r\n    ): boolean |\r\n    import('@angular/router').UrlTree |\r\n    import('rxjs').Observable<boolean |\r\n    import('@angular/router').UrlTree> |\r\n    Promise<boolean |\r\n    import('@angular/router').UrlTree> {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\nimport { AppRoutes } from './app.routes';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { HeaderComponent } from './include/header/header.component';\nimport { FooterComponent } from './include/footer/footer.component';\nimport { RegisterComponent } from './security/register/register.component';\nimport { LoginComponent } from './security/login/login.component';\nimport { CreateSubscriberComponent } from './subscriber/create-subscriber/create-subscriber.component';\nimport { ReadSubscribersComponent } from './subscriber/read-subscribers/read-subscribers.component';\nimport { UpdateSubscriberComponent } from './subscriber/update-subscriber/update-subscriber.component';\nimport { ReadSubscriberComponent } from './subscriber/read-subscriber/read-subscriber.component';\n\nimport { LoginInterceptorProvider } from './security/interceptor/login.interceptor';\nimport { LoginGuard } from './security/guard/login.guard';\nimport { LogoutGuard } from './security/guard/logout.guard';\nimport { ContactComponent } from './contact/contact.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    HeaderComponent,\n    FooterComponent,\n    RegisterComponent,\n    LoginComponent,\n    CreateSubscriberComponent,\n    ReadSubscribersComponent,\n    UpdateSubscriberComponent,\n    ReadSubscriberComponent,\n    ContactComponent\n  ],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxPaginationModule,\n    AppRoutes\n  ],\n  providers: [\n    LoginInterceptorProvider,\n    LoginGuard,\n    LogoutGuard\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { RegisterService } from '../../service/register.service';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  // crée un objet de type FormGroup\n  registerForm: FormGroup;\n  isSubmitted = false;\n\n  constructor(\n    // injecte les services\n    private formBuilder: FormBuilder,\n    private registerService: RegisterService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    // valide les champs\n    this.registerForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      agreeTerms: [false, Validators.requiredTrue]\n    });\n  }\n\n  // crée un utilisateur\n  createUser(): void {\n    this.isSubmitted = true;\n    // console.log(this.registerForm.value);\n\n    // Empêche l'envoi si les données sont invalides\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    // passe en paramètre les données saisies à la méthode \"createUser()\" du registerService\n    this.registerService.createUser(this.registerForm.value).subscribe(\n      (response) => {\n        // console.log(response);\n        // redirige vers la page 'login'\n        const link = ['login'];\n        this.router.navigate(link);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n}\n","<div class=\"mt-3 section\">\n    <h2 class=\"mb-5\"><span class=\"spantitleh2\">Sign</span> up</h2>\n    <div class=\"formContainer\">\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"createUser()\">\n            <div class=\"form-group\">\n                <label for=\"email\">Email</label>\n                <input type=\"email\" id=\"email\" name=\"email\" formControlName=\"email\" autofocus class=\"form-control shadow-none\" autocomplete=\"username\">\n                <span class=\"text-danger\" *ngIf=\"registerForm.controls['email'].hasError('required') && registerForm.controls['email'].touched\">\n                    Please enter your email.\n                </span>\n                <span class=\"text-danger\" *ngIf=\"registerForm.controls['email'].hasError('pattern') && registerForm.controls['email'].touched\">\n                    Please enter a valid email.\n                </span>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" formControlName=\"password\" class=\"form-control shadow-none\" autocomplete=\"current-password\">\n                <span class=\"text-danger\" *ngIf=\"registerForm.controls['password'].hasError('required') && registerForm.controls['password'].touched\">\n                    Please enter your password.\n                </span>\n                <span class=\"text-danger\" *ngIf=\"registerForm.controls['password'].hasError('minlength') && registerForm.controls['password'].touched\">\n                    Your password should be at least 6 characters.\n                </span>\n            </div>\n            <div class=\"form-group form-check\">\n                <input type=\"checkbox\" id=\"agreeTerms\" name=\"checkbox\" class=\"form-check-input\" formControlName=\"agreeTerms\">\n                <label for=\"agreeTerms\" class=\"form-check-label\">Agree terms</label>\n                <span  class=\"text-danger\" *ngIf=\"isSubmitted && registerForm.controls['agreeTerms'].hasError('required') && registerForm.controls['agreeTerms'].untouched\">\n                    You must agree Terms & Conditions.\n                </span>\n            </div>\n            <div class=\"form-group\">\n                <button>Sign up</button>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ContactService } from './../service/contact.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent implements OnInit {\n  // crée un objet de type FormGroup\n  contactForm: FormGroup;\n  submitted = false;\n\n  constructor(\n    // injecte les services\n    private formBuilder: FormBuilder,\n    private contactService: ContactService\n  ) { }\n\n  ngOnInit(): void {\n    // valide les champs\n    this.contactForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      message: ['', Validators.required]\n    });\n  }\n\n  // passe en paramètre les données saisies à la méthode \"sendEmail()\" du contactService\n  onSubmit(): Subscription {\n    console.log(this.contactForm.value);\n    this.submitted = true;\n    return this.contactService.sendEmail(this.contactForm.value).subscribe(\n      response => {\n        console.log('success');\n        console.log(response);\n      },\n      error => {\n        console.error('error', error);\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <div [hidden]=\"!submitted\" class=\"contact-message\">\n      <div *ngIf=\"contactForm.valid && submitted\" class=\"alert alert-success text-center w-50 mx-auto\">\n        Votre message a bien été envoyé !\n      </div>\n    </div>\n    <div class=\"wrapper animated bounceInLeft\">        \n        <div class=\"infos\">\n            <h3 class=\"mt-4\">Fatima Benzaoui</h3>\n            <ul>\n                <li>9 rue Clos Suiphon<br/>69 003 LYON</li>\n                <li>+336 52 79 87 44</li>\n                <li>fatima.benzaoui@yahoo.fr</li>\n            </ul>\n            <h3 class=\"mt-4\">Stack Technique</h3>\n            <ul>\n                <li>HTML - CSS - BOOTSTRAP</li>\n                <li>JAVASCRIPT - JQUERY</li>\n                <li>REACT - ANGULAR</li>\n                <li>PHP - SYMFONY</li>\n                <li>JAVA - SPRING</li>\n            </ul>\n        </div>\n        <div class=\"contact\">\n            <form [formGroup]=\"contactForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form-group\">\n                    <label for=\"name\">Name</label>\n                    <input formControlName=\"name\" type=\"text\" id=\"name\" name=\"name\" autofocus class=\"form-control shadow-none\" autocomplete=\"name\">\n                    <span class=\"text-danger\" *ngIf=\"contactForm.controls['name'].hasError('required') && contactForm.controls['name'].touched\">Please enter your name</span>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input formControlName=\"email\" type=\"email\" id=\"email\" name=\"email\" class=\"form-control shadow-none\" autocomplete=\"email\">\n                    <span class=\"text-danger\" *ngIf=\"contactForm.controls['email'].hasError('required') && contactForm.controls['email'].touched\">Please enter your email</span>\n                <span class=\"text-danger\" *ngIf=\"contactForm.controls['email'].hasError('pattern') && contactForm.controls['email'].touched\">Please enter a valid email</span>\n                </div>\n                <div class=\"full\">\n                    <label for=\"message\">Message</label>\n                    <textarea formControlName=\"message\" id=\"message\" name=\"message\" rows=\"6\" class=\"form-control shadow-none\" autocomplete=\"message\"></textarea>\n                    <span class=\"text-danger\" *ngIf=\"contactForm.controls['message'].hasError('required') && contactForm.controls['message'].touched\">Please enter your message</span>\n                </div>\n                <div class=\"full\">\n                    <button type=\"submit\" [disabled]=\"contactForm.invalid\">Submit</button>\n                </div> \n            </form>       \n        </div>\n    </div>\n</div>\n","export const environment = {\n  production: true,\n  api: 'https://www.fatimabenzaoui.com/api'\n};\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { SubscribersService } from '../../service/subscribers.service';\nimport { Subscriber } from '../../model/subscriber';\nimport { Router, Params, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-update-subscriber',\n  templateUrl: './update-subscriber.component.html',\n  styleUrls: ['./update-subscriber.component.css']\n})\nexport class UpdateSubscriberComponent implements OnInit {\n\n  // crée un objet de type FormGroup\n  createSubscriberForm: FormGroup;\n\n  constructor(\n    // injecte les services\n    private formBuilder: FormBuilder,\n    private subscribersService: SubscribersService,\n    private router: Router,\n    private routes: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    // récupère le param \"id\" de la route\n    const routeParams = this.routes.snapshot.params;\n    // console.log(routeParams.id);\n\n    // passe en paramètre l'id à la méthode \"readSubscriber()\" du subscribersService\n    this.subscribersService.readSubscriber(routeParams.id).subscribe(\n      (response) => {\n        // console.log(response);\n        // affiche les données dans les champs\n        this.createSubscriberForm.patchValue(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n\n    // valide les champs\n    this.createSubscriberForm = this.formBuilder.group({\n      // Bien penser à ajouter l'id pour éviter l'erreur id=undefined\n      id: [''],\n      fname: ['', [Validators.required, Validators.maxLength(12)]],\n      lname: ['', [Validators.required, Validators.maxLength(12)]],\n      email: ['', [\n        Validators.required,\n        Validators.maxLength(30),\n        Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")\n      ]]\n    });\n  }\n\n  updateSubscriber(): void {\n    console.log(this.createSubscriberForm.value);\n    if (this.createSubscriberForm.invalid) {\n      return;\n    }\n    // passe en paramètre les données saisies à la méthode \"updateSubscriber()\" du subscribersService\n    this.subscribersService.updateSubscriber(this.createSubscriberForm.value).subscribe(\n      (response) => {\n        const link = ['read-subscribers'];\n        this.router.navigate(link);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n}\n","<div class=\"mt-3 container section\">\n    <h2 class=\"mb-5\"><span class=\"spantitleh2\">Update</span> a subscriber</h2>\n    <div class=\"formContainer\">\n        <form [formGroup]=\"createSubscriberForm\"  novalidate class=\"form\">\n            <div class=\"form-group\">\n                <label for=\"fname\">First name</label>\n                <input type=\"text\" formControlName=\"fname\" name=\"fname\" id=\"fname\" class=\"form-control shadow-none\" autofocus>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('fname').hasError('required') && createSubscriberForm.get('fname').touched\">Please, enter your first name.</div>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('fname').hasError('maxlength') && createSubscriberForm.get('fname').touched\">Your first name must have 12 characters max.</div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"lname\">Last name</label>\n                <input type=\"text\" formControlName=\"lname\" name=\"lname\" id=\"lname\" class=\"form-control shadow-none\">\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('lname').hasError('required') && createSubscriberForm.get('lname').touched\">Please, enter your last name.</div>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('lname').hasError('maxlength') && createSubscriberForm.get('lname').touched\">Your last name must have 12 characters max.</div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"email\">Email</label>\n                <input type=\"email\" formControlName=\"email\" name=\"email\" id=\"email\" class=\"form-control shadow-none\">\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('email').hasError('required') && createSubscriberForm.get('email').touched\">Please, enter your email.</div>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('email').hasError('maxlength') && createSubscriberForm.get('email').touched\">Your email must have 30 characters max.</div>\n                <div class=\"text-danger\" *ngIf=\"createSubscriberForm.get('email').hasError('pattern') && createSubscriberForm.get('email').touched\">Please enter a valid email</div>\n            </div>\n            <button (click)=\"updateSubscriber()\" [disabled]=\"createSubscriberForm.invalid\" class=\"shadow-none\" >Update</button>\n        </form>\n    </div>\n    <hr>\n    <a [routerLink]=\"['/read-subscribers']\" class=\"float-right\">&lt;- Back</a>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { SubscribersService } from '../../service/subscribers.service';\nimport { Subscriber } from '../../model/subscriber';\nimport { User } from '../../model/user';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-read-subscribers',\n  templateUrl: './read-subscribers.component.html',\n  styleUrls: ['./read-subscribers.component.css']\n})\nexport class ReadSubscribersComponent implements OnInit {\n  subscribers: Subscriber[];\n  id: number;\n  // pagination\n  totalRecords: number;\n  page = 1;\n  user: User[];\n\n  constructor(\n      // injecte les services\n      private subscribersService: SubscribersService,\n      private router: Router,\n    ) { }\n\n  ngOnInit(): void {\n      // appelle la méthode readSubscribers() du subscribersService\n      this.subscribersService.readSubscribers().subscribe((response) => {\n      this.subscribers = response;\n      // console.log(this.subscribers);\n\n      // pagination\n      this.totalRecords = response.length;\n    });\n  }\n\n  // redirige vers la page qui affiche les détails de l'abonné\n  goToReadSubscriber(subscribers: Subscriber): void {\n    this.id = subscribers.id;\n    const link = [`read-subscriber/${this.id}`];\n    this.router.navigate(link);\n  }\n\n  // redirige vers la page qui permet de modifier un abonné\n  goToUpdateSubscriber(subscribers: Subscriber): void {\n    this.id = subscribers.id;\n    const link = [`update-subscriber/${this.id}`];\n    this.router.navigate(link);\n  }\n\n  deleteSubscriber(subscribers: Subscriber): void {\n    if(window.confirm('Are sure you want to delete this record ?')) {\n    // passe en paramètre l'id à la méthode deleteSubscriber() du subscribersService\n    this.subscribersService.deleteSubscriber(subscribers.id).subscribe(\n      (response) => {\n        this.subscribers = this.subscribers.filter(u => u !== subscribers);\n      });\n    }\n  }\n}\n","<div class=\"container section\">\n    <h2 class=\"mb-4\"><span class=\"spantitleh2\">Hello</span> user ! ✅</h2>\n    <h2 class=\"d-inline\">Subscribers List</h2>\n    <a [routerLink]=\"['/create-subscriber']\" class=\"btn btn-sm btn-success float-right shadow-none\">Create</a>\n    <table class=\"table table-striped table-hover mx-auto bg-white\">\n        <thead>\n            <tr>\n                <th>First name</th><th>Last name</th><th>Email</th><th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let subscriber of subscribers | paginate: { id: 'listing_pagination', itemsPerPage: 5, currentPage: page, totalItems: totalRecords }\">\n                <td>{{ subscriber.fname|titlecase }}</td>\n                <td>{{ subscriber.lname|titlecase }}</td>\n                <td>{{ subscriber.email }}</td>\n                <td>\n                    <a class=\"btn btn-secondary btn-sm shadow-none\" (click)=\"goToReadSubscriber(subscriber)\">Read</a>\n                    <a class=\"btn btn-primary btn-sm shadow-none ml-2\" (click)=\"goToUpdateSubscriber(subscriber)\">Update</a>\n                    <a class=\"btn btn-danger btn-sm shadow-none ml-2\" (click)=\"deleteSubscriber(subscriber)\">Delete</a>\n                </td>\n            </tr>\n        </tbody>\n    </table>    \n    <div class=\"navigation\">\n        <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" (pageChange)=\"page = $event\"></pagination-controls>\n    </div>\n</div>\n","\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HTTP_INTERCEPTORS, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport class LoginInterceptor implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            const cloneReq = req.clone( {params: new HttpParams().set('access_token', token)} );\r\n            return next.handle(cloneReq);\r\n        } else {\r\n            return next.handle(req);\r\n        }\r\n    }\r\n}\r\n\r\nexport const LoginInterceptorProvider = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: LoginInterceptor,\r\n  multi: true\r\n};\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}